
Ext.namespace("gxp");gxp.util={_uniqueNames:{},getOGCExceptionText:function(report){var msg;if(report&&report.exceptions){msg=[];Ext.each(report.exceptions,function(obj){Ext.each(obj.texts,function(text){msg.push(text);});});msg=msg.join("\n");}else{msg="Unknown error (no exception report).";}
return msg;},dispatch:function(functions,complete,scope){complete=complete||Ext.emptyFn;scope=scope||this;var requests=functions.length;var responses=0;var storage={};function respond(){++responses;if(responses===requests){complete.call(scope,storage);}}
function trigger(index){window.setTimeout(function(){functions[index].apply(scope,[respond,storage]);});}
for(var i=0;i<requests;++i){trigger(i);}},uniqueName:function(name,delimiter){delimiter=delimiter||" ";var regEx=new RegExp(delimiter+"[0-9]*$");var key=name.replace(regEx,"");var regExResult=regEx.exec(name);var count=this._uniqueNames[key]!==undefined?this._uniqueNames[key]:(regExResult instanceof Array?Number(regExResult[0]):undefined);var newName=key;if(count!==undefined){count++;newName+=delimiter+count;}
this._uniqueNames[key]=count||0;return newName;},getAbsoluteUrl:function(url){var a;if(Ext.isIE6||Ext.isIE7||Ext.isIE8){a=document.createElement("<a href='"+url+"'/>");a.style.display="none";document.body.appendChild(a);a.href=a.href;document.body.removeChild(a);}else{a=document.createElement("a");a.href=url;}
return a.href;},md5:(function(){var MD5_T=[0x00000000,0xd76aa478,0xe8c7b756,0x242070db,0xc1bdceee,0xf57c0faf,0x4787c62a,0xa8304613,0xfd469501,0x698098d8,0x8b44f7af,0xffff5bb1,0x895cd7be,0x6b901122,0xfd987193,0xa679438e,0x49b40821,0xf61e2562,0xc040b340,0x265e5a51,0xe9b6c7aa,0xd62f105d,0x02441453,0xd8a1e681,0xe7d3fbc8,0x21e1cde6,0xc33707d6,0xf4d50d87,0x455a14ed,0xa9e3e905,0xfcefa3f8,0x676f02d9,0x8d2a4c8a,0xfffa3942,0x8771f681,0x6d9d6122,0xfde5380c,0xa4beea44,0x4bdecfa9,0xf6bb4b60,0xbebfbc70,0x289b7ec6,0xeaa127fa,0xd4ef3085,0x04881d05,0xd9d4d039,0xe6db99e5,0x1fa27cf8,0xc4ac5665,0xf4292244,0x432aff97,0xab9423a7,0xfc93a039,0x655b59c3,0x8f0ccc92,0xffeff47d,0x85845dd1,0x6fa87e4f,0xfe2ce6e0,0xa3014314,0x4e0811a1,0xf7537e82,0xbd3af235,0x2ad7d2bb,0xeb86d391];var MD5_round1=[[0,7,1],[1,12,2],[2,17,3],[3,22,4],[4,7,5],[5,12,6],[6,17,7],[7,22,8],[8,7,9],[9,12,10],[10,17,11],[11,22,12],[12,7,13],[13,12,14],[14,17,15],[15,22,16]];var MD5_round2=[[1,5,17],[6,9,18],[11,14,19],[0,20,20],[5,5,21],[10,9,22],[15,14,23],[4,20,24],[9,5,25],[14,9,26],[3,14,27],[8,20,28],[13,5,29],[2,9,30],[7,14,31],[12,20,32]];var MD5_round3=[[5,4,33],[8,11,34],[11,16,35],[14,23,36],[1,4,37],[4,11,38],[7,16,39],[10,23,40],[13,4,41],[0,11,42],[3,16,43],[6,23,44],[9,4,45],[12,11,46],[15,16,47],[2,23,48]];var MD5_round4=[[0,6,49],[7,10,50],[14,15,51],[5,21,52],[12,6,53],[3,10,54],[10,15,55],[1,21,56],[8,6,57],[15,10,58],[6,15,59],[13,21,60],[4,6,61],[11,10,62],[2,15,63],[9,21,64]];function MD5_F(x,y,z){return(x&y)|(~x&z);}
function MD5_G(x,y,z){return(x&z)|(y&~z);}
function MD5_H(x,y,z){return x^y^z;}
function MD5_I(x,y,z){return y^(x|~z);}
var MD5_round=[[MD5_F,MD5_round1],[MD5_G,MD5_round2],[MD5_H,MD5_round3],[MD5_I,MD5_round4]];function MD5_pack(n32){return String.fromCharCode(n32&0xff)+
String.fromCharCode((n32>>>8)&0xff)+
String.fromCharCode((n32>>>16)&0xff)+
String.fromCharCode((n32>>>24)&0xff);}
function MD5_unpack(s4){return s4.charCodeAt(0)|(s4.charCodeAt(1)<<8)|(s4.charCodeAt(2)<<16)|(s4.charCodeAt(3)<<24);}
function MD5_number(n){while(n<0){n+=4294967296;}
while(n>4294967295){n-=4294967296;}
return n;}
function MD5_apply_round(x,s,f,abcd,r){var a,b,c,d;var kk,ss,ii;var t,u;a=abcd[0];b=abcd[1];c=abcd[2];d=abcd[3];kk=r[0];ss=r[1];ii=r[2];u=f(s[b],s[c],s[d]);t=s[a]+u+x[kk]+MD5_T[ii];t=MD5_number(t);t=((t<<ss)|(t>>>(32-ss)));t+=s[b];s[a]=MD5_number(t);}
function MD5_hash(data){var abcd,x,state,s;var len,index,padLen,f,r;var i,j,k;var tmp;state=[0x67452301,0xefcdab89,0x98badcfe,0x10325476];len=data.length;index=len&0x3f;padLen=(index<56)?(56-index):(120-index);if(padLen>0){data+="\x80";for(i=0;i<padLen-1;i++){data+="\x00";}}
data+=MD5_pack(len*8);data+=MD5_pack(0);len+=padLen+8;abcd=[0,1,2,3];x=[16];s=[4];for(k=0;k<len;k+=64){for(i=0,j=k;i<16;i++,j+=4){x[i]=data.charCodeAt(j)|(data.charCodeAt(j+1)<<8)|(data.charCodeAt(j+2)<<16)|(data.charCodeAt(j+3)<<24);}
for(i=0;i<4;i++){s[i]=state[i];}
for(i=0;i<4;i++){f=MD5_round[i][0];r=MD5_round[i][1];for(j=0;j<16;j++){MD5_apply_round(x,s,f,abcd,r[j]);tmp=abcd[0];abcd[0]=abcd[3];abcd[3]=abcd[2];abcd[2]=abcd[1];abcd[1]=tmp;}}
for(i=0;i<4;i++){state[i]+=s[i];state[i]=MD5_number(state[i]);}}
return MD5_pack(state[0])+
MD5_pack(state[1])+
MD5_pack(state[2])+
MD5_pack(state[3]);}
function MD5_hexhash(data){var i,out,c;var bit128;bit128=MD5_hash(data);out="";for(i=0;i<16;i++){c=bit128.charCodeAt(i);out+="0123456789abcdef".charAt((c>>4)&0xf);out+="0123456789abcdef".charAt(c&0xf);}
return out;}
return function(data){return MD5_hexhash(data);};})()};Ext.namespace("gxp.menu");gxp.menu.LayerMenu=Ext.extend(Ext.menu.Menu,{layerText:"Layer",layers:null,initComponent:function(){gxp.menu.LayerMenu.superclass.initComponent.apply(this,arguments);this.layers.on("add",this.onLayerAdd,this);this.onLayerAdd();},onRender:function(ct,position){gxp.menu.LayerMenu.superclass.onRender.apply(this,arguments);},beforeDestroy:function(){if(this.layers&&this.layers.on){this.layers.un("add",this.onLayerAdd,this);}
delete this.layers;gxp.menu.LayerMenu.superclass.beforeDestroy.apply(this,arguments);},onLayerAdd:function(){this.removeAll();this.add({iconCls:"gxp-layer-visibility",text:this.layerText,canActivate:false},"-");this.layers.each(function(record){var layer=record.getLayer();if(layer.displayInLayerSwitcher){var item=new Ext.menu.CheckItem({text:record.get("title"),checked:record.getLayer().getVisibility(),group:record.get("group"),listeners:{checkchange:function(item,checked){record.getLayer().setVisibility(checked);}}});if(this.items.getCount()>2){this.insert(2,item);}else{this.add(item);}}},this);}});Ext.reg('gxp_layermenu',gxp.menu.LayerMenu);Ext.namespace("gxp");gxp.FeatureEditPopup=Ext.extend(GeoExt.Popup,{closeMsgTitle:'Save Changes?',closeMsg:'This feature has unsaved changes. Would you like to save your changes?',deleteMsgTitle:'Delete Feature?',deleteMsg:'Are you sure you want to delete this feature?',editButtonText:'Edit',editButtonTooltip:'Make this feature editable',deleteButtonText:'Delete',deleteButtonTooltip:'Delete this feature',cancelButtonText:'Cancel',cancelButtonTooltip:'Stop editing, discard changes',saveButtonText:'Save',saveButtonTooltip:'Save changes',layout:"fit",feature:null,schema:null,readOnly:false,allowDelete:false,editing:false,grid:null,modifyControl:null,geometry:null,attributes:null,cancelButton:null,saveButton:null,editButton:null,deleteButton:null,initComponent:function(){this.addEvents("featuremodified","canceledit","cancelclose");if(!this.dateFormat){this.dateFormat=Ext.form.DateField.prototype.format;}
if(!this.timeFormat){this.timeFormat=Ext.form.TimeField.prototype.format;}
var feature=this.feature;if(feature instanceof GeoExt.data.FeatureRecord){feature=this.feature=feature.getFeature();}
if(!this.location){this.location=feature;}
this.anchored=!this.editing;var customEditors={};var customRenderers={};if(this.schema){var attributes={};if(this.fields){if(!this.excludeFields){this.excludeFields=[];}
for(var i=0,ii=this.fields.length;i<ii;++i){attributes[this.fields[i]]=null;}}
var ucFields=this.fields?this.fields.join(",").toUpperCase().split(","):[];this.schema.each(function(r){var type=r.get("type");if(type.match(/^[^:]*:?((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry))/)){return;}
var name=r.get("name");if(this.fields){if(ucFields.indexOf(name.toUpperCase())==-1){this.excludeFields.push(name);}}
var value=feature.attributes[name];var fieldCfg=GeoExt.form.recordToField(r);var listeners;if(typeof value=="string"){var format;switch(type.split(":").pop()){case"date":format=this.dateFormat;fieldCfg.editable=false;break;case"dateTime":if(!format){format=this.dateFormat+" "+this.timeFormat;fieldCfg.editable=true;}
fieldCfg.format=format;listeners={"startedit":function(el,value){if(!(value instanceof Date)){var date=Date.parseDate(value.replace(/Z$/,""),"c");if(date){this.setValue(date);}}}};customRenderers[name]=(function(){return function(value){var date=value;if(typeof value=="string"){date=Date.parseDate(value.replace(/Z$/,""),"c");}
return date?date.format(format):value;};})();break;case"boolean":listeners={"startedit":function(el,value){this.setValue(Boolean(value));}};break;}}
customEditors[name]=new Ext.grid.GridEditor({field:Ext.create(fieldCfg),listeners:listeners});attributes[name]=value;},this);feature.attributes=attributes;}
if(!this.title&&feature.fid){this.title=feature.fid;}
this.editButton=new Ext.Button({text:this.editButtonText,tooltip:this.editButtonTooltip,iconCls:"edit",handler:this.startEditing,scope:this});this.deleteButton=new Ext.Button({text:this.deleteButtonText,tooltip:this.deleteButtonTooltip,iconCls:"delete",hidden:!this.allowDelete,handler:this.deleteFeature,scope:this});this.cancelButton=new Ext.Button({text:this.cancelButtonText,tooltip:this.cancelButtonTooltip,iconCls:"cancel",hidden:true,handler:function(){this.stopEditing(false);},scope:this});this.saveButton=new Ext.Button({text:this.saveButtonText,tooltip:this.saveButtonTooltip,iconCls:"save",hidden:true,handler:function(){this.stopEditing(true);},scope:this});var ucExcludeFields=this.excludeFields?this.excludeFields.join(",").toUpperCase().split(","):[];this.grid=new Ext.grid.PropertyGrid({border:false,source:feature.attributes,customEditors:customEditors,customRenderers:customRenderers,propertyNames:this.propertyNames,viewConfig:{forceFit:true,getRowClass:function(record){if(ucExcludeFields.indexOf(record.get("name").toUpperCase())!==-1){return"x-hide-nosize";}}},listeners:{"beforeedit":function(){return this.editing;},"propertychange":function(){this.setFeatureState(this.getDirtyState());},scope:this},initComponent:function(){var origSort=Ext.data.Store.prototype.sort;Ext.data.Store.prototype.sort=function(){};Ext.grid.PropertyGrid.prototype.initComponent.apply(this,arguments);Ext.data.Store.prototype.sort=origSort;}});this.grid.propStore.isEditableValue=function(){return true;};this.items=[this.grid];this.bbar=new Ext.Toolbar({hidden:this.readOnly,items:[this.editButton,this.deleteButton,this.saveButton,this.cancelButton]});gxp.FeatureEditPopup.superclass.initComponent.call(this);this.on({"show":function(){if(this.editing){this.editing=null;this.startEditing();}},"beforeclose":function(){if(!this.editing){return;}
if(this.feature.state===this.getDirtyState()){Ext.Msg.show({title:this.closeMsgTitle,msg:this.closeMsg,buttons:Ext.Msg.YESNOCANCEL,fn:function(button){if(button&&button!=="cancel"){this.stopEditing(button==="yes");this.close();}else{this.fireEvent("cancelclose",this);}},scope:this,icon:Ext.MessageBox.QUESTION,animEl:this.getEl()});return false;}else{this.stopEditing(false);}},scope:this});},getDirtyState:function(){return this.feature.state===OpenLayers.State.INSERT?this.feature.state:OpenLayers.State.UPDATE;},startEditing:function(){if(!this.editing){this.editing=true;this.anc&&this.unanchorPopup();this.editButton.hide();this.deleteButton.hide();this.saveButton.show();this.cancelButton.show();this.geometry=this.feature.geometry.clone();this.attributes=Ext.apply({},this.feature.attributes);this.modifyControl=new OpenLayers.Control.ModifyFeature(this.feature.layer,{standalone:true,vertexRenderIntent:this.vertexRenderIntent});this.feature.layer.map.addControl(this.modifyControl);this.modifyControl.activate();this.modifyControl.selectFeature(this.feature);}},stopEditing:function(save){if(this.editing){this.modifyControl.deactivate();this.modifyControl.destroy();var feature=this.feature;if(feature.state===this.getDirtyState()){if(save===true){if(this.schema){var attribute,rec;for(var i in feature.attributes){rec=this.schema.getAt(this.schema.findExact("name",i));attribute=feature.attributes[i];if(attribute instanceof Date){var type=rec.get("type").split(":").pop();feature.attributes[i]=attribute.format(type=="date"?"Y-m-d":"c");}}}
this.fireEvent("featuremodified",this,feature);}else if(feature.state===OpenLayers.State.INSERT){this.editing=false;feature.layer.destroyFeatures([feature]);this.fireEvent("canceledit",this,null);this.close();}else{var layer=feature.layer;layer.drawFeature(feature,{display:"none"});feature.geometry=this.geometry;feature.attributes=this.attributes;this.setFeatureState(null);this.grid.setSource(feature.attributes);layer.drawFeature(feature);this.fireEvent("canceledit",this,feature);}}
if(!this.isDestroyed){this.cancelButton.hide();this.saveButton.hide();this.editButton.show();this.allowDelete&&this.deleteButton.show();}
this.editing=false;}},deleteFeature:function(){Ext.Msg.show({title:this.deleteMsgTitle,msg:this.deleteMsg,buttons:Ext.Msg.YESNO,fn:function(button){if(button==="yes"){this.setFeatureState(OpenLayers.State.DELETE);this.fireEvent("featuremodified",this,this.feature);this.close();}},scope:this,icon:Ext.MessageBox.QUESTION,animEl:this.getEl()});},setFeatureState:function(state){this.feature.state=state;var layer=this.feature.layer;layer&&layer.events.triggerEvent("featuremodified",{feature:this.feature});}});Ext.reg('gxp_featureeditpopup',gxp.FeatureEditPopup);Ext.namespace("gxp");gxp.LayerUploadPanel=Ext.extend(Ext.FormPanel,{titleLabel:"Title",titleEmptyText:"Layer title",abstractLabel:"Description",abstractEmptyText:"Layer description",fileLabel:"Data",fieldEmptyText:"Browse for data archive...",uploadText:"Upload",waitMsgText:"Uploading your data...",invalidFileExtensionText:"File extension must be one of: ",optionsText:"Options",workspaceLabel:"Workspace",workspaceEmptyText:"Default workspace",dataStoreLabel:"Store",dataStoreEmptyText:"Default datastore",crsLabel:"CRS",crsEmptyText:"Coordinate Reference System ID",invalidCrsText:"CRS identifier should be an EPSG code (e.g. EPSG:4326)",fileUpload:true,validFileExtensions:[".zip",".tif",".gz",".tar.bz2",".tar",".tgz",".tbz2"],constructor:function(config){config.errorReader={read:config.handleUploadResponse||this.handleUploadResponse.createDelegate(this)};gxp.LayerUploadPanel.superclass.constructor.call(this,config);},selectedWorkspace:null,initComponent:function(){this.items=[{xtype:"textfield",name:"title",fieldLabel:this.titleLabel,emptyText:this.titleEmptyText,allowBlank:true},{xtype:"textarea",name:"abstract",fieldLabel:this.abstractLabel,emptyText:this.abstractEmptyText,allowBlank:true},{xtype:"fileuploadfield",id:"file",emptyText:this.fieldEmptyText,fieldLabel:this.fileLabel,name:"file",buttonText:"",buttonCfg:{iconCls:"gxp-icon-filebrowse"},validator:this.fileNameValidator.createDelegate(this)},{xtype:"fieldset",title:this.optionsText,checkboxToggle:true,collapsed:true,hidden:this.workspace!=undefined&&this.store!=undefined&&this.crs!=undefined,hideMode:"offsets",defaults:{anchor:"97%"},items:[this.createWorkspacesCombo(),this.createDataStoresCombo(),{xtype:"textfield",name:"crs",fieldLabel:this.crsLabel,emptyText:this.crsEmptyText,allowBlank:true,regex:/^epsg:\d+$/i,regexText:this.invalidCrsText}],listeners:{collapse:function(fieldset){fieldset.items.each(function(item){item.reset();});}}}];this.buttons=[{text:this.uploadText,handler:function(){var form=this.getForm();if(form.isValid()){form.submit({url:this.getUploadUrl(),submitEmptyText:false,waitMsg:this.waitMsgText,waitMsgTarget:true,reset:true,success:this.handleUploadSuccess,scope:this});}},scope:this}];this.addEvents("workspaceselected","datastoreselected","uploadcomplete");gxp.LayerUploadPanel.superclass.initComponent.call(this);},fileNameValidator:function(name){var valid=false;var ext,len=name.length;for(var i=0,ii=this.validFileExtensions.length;i<ii;++i){ext=this.validFileExtensions[i];if(name.slice(-ext.length).toLowerCase()===ext){valid=true;break;}}
return valid||this.invalidFileExtensionText+this.validFileExtensions.join(", ");},createWorkspacesCombo:function(){return{xtype:"combo",name:"workspace",fieldLabel:this.workspaceLabel,emptyText:this.workspaceEmptyText,store:new Ext.data.JsonStore({url:this.getWorkspacesUrl(),autoLoad:true,root:"workspaces.workspace",fields:["name","href"]}),displayField:"name",valueField:"name",mode:"local",allowBlank:true,triggerAction:"all",editable:false,listeners:{select:function(combo,record,index){this.fireEvent("workspaceselected",this,record);},scope:this}};},createDataStoresCombo:function(){var store=new Ext.data.JsonStore({autoLoad:false,root:"dataStores.dataStore",fields:["name","href"]});this.on({workspaceselected:function(panel,record){combo.reset();var workspaceUrl=record.get("href");store.removeAll();store.proxy=new Ext.data.HttpProxy({url:workspaceUrl.split(".json").shift()+"/datastores.json"});store.load();},scope:this});var combo=new Ext.form.ComboBox({name:"store",fieldLabel:this.dataStoreLabel,emptyText:this.dataStoreEmptyText,store:store,displayField:"name",valueField:"name",mode:"local",allowBlank:true,triggerAction:"all",editable:false,listeners:{select:function(combo,record,index){this.fireEvent("datastoreselected",this,record);},scope:this}});return combo;},getUploadUrl:function(){return this.url+"/upload";},getWorkspacesUrl:function(){return this.url+"/workspaces.json";},handleUploadResponse:function(response){var obj=this.parseResponseText(response.responseText);var success=obj&&obj.success;var records=[];if(!success){records=[{data:{id:"file",msg:obj.message}}];}
return{success:success,records:records};},parseResponseText:function(text){var obj;try{obj=Ext.decode(text);}catch(err){var match=text.match(/^\s*<pre>(.*)<\/pre>\s*/);if(match){try{obj=Ext.decode(match[1]);}catch(err){}}}
return obj;},handleUploadSuccess:function(form,action){var details=this.parseResponseText(action.response.responseText);this.fireEvent("uploadcomplete",this,details);}});Ext.reg("gxp_layeruploadpanel",gxp.LayerUploadPanel);Ext.namespace("gxp");gxp.QueryPanel=Ext.extend(Ext.Panel,{layout:"form",spatialQuery:true,attributeQuery:true,selectedLayer:null,featureStore:null,attributeStore:null,geometryType:null,geometryName:null,queryByLocationText:"Query by location",currentTextText:"Current extent",queryByAttributesText:"Query by attributes",layerText:"Layer",initComponent:function(){this.addEvents("ready","beforelayerchange","layerchange","beforequery","query","storeload");this.mapExtentField=new Ext.form.TextField({fieldLabel:this.currentTextText,readOnly:true,anchor:"100%",value:this.getFormattedMapExtent()});this.map.events.on({moveend:this.updateMapExtent,scope:this});this.createFilterBuilder(this.layerStore.getAt(0));this.items=[{xtype:"combo",name:"layer",fieldLabel:this.layerText,store:this.layerStore,value:this.layerStore.getAt(0).get("name"),displayField:"title",valueField:"name",mode:"local",allowBlank:true,editable:false,triggerAction:"all",listeners:{beforeselect:function(combo,record,index){return this.fireEvent("beforelayerchange",this,record);},select:function(combo,record,index){this.createFilterBuilder(record);},scope:this}},{xtype:"fieldset",title:this.queryByLocationText,checkboxToggle:true,collapsed:!this.spatialQuery,anchor:"95%",items:[this.mapExtentField],listeners:{collapse:function(){this.spatialQuery=false;},expand:function(){this.spatialQuery=true;},scope:this}},{xtype:"fieldset",title:this.queryByAttributesText,checkboxToggle:true,collapsed:!this.attributeQuery,anchor:"95%",items:[this.filterBuilder],listeners:{collapse:function(){this.attributeQuery=false;},expand:function(){this.attributeQuery=true;},scope:this}}];gxp.QueryPanel.superclass.initComponent.apply(this,arguments);},createFilterBuilder:function(record){this.selectedLayer=record;var owner=this.filterBuilder&&this.filterBuilder.ownerCt;if(owner){owner.remove(this.filterBuilder,true);}
this.attributeStore=new GeoExt.data.AttributeStore({url:record.get("schema"),listeners:{load:function(store){this.geometryName=null;store.filterBy(function(r){var match=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/.exec(r.get("type"));if(match&&!this.geometryName){this.geometryName=r.get("name");this.geometryType=match[1];this.fireEvent("layerchange",this,record);}
return!match;},this);this.createFeatureStore();},scope:this},autoLoad:true});this.filterBuilder=new gxp.FilterBuilder({attributes:this.attributeStore,allowGroups:false});if(owner){owner.add(this.filterBuilder);owner.doLayout();}},getFormattedMapExtent:function(){return this.map&&this.map.getExtent()&&this.map.getExtent().toBBOX().replace(/\.(\d)\d*/g,".$1").replace(/,/g,", ");},updateMapExtent:function(){this.mapExtentField.setValue(this.getFormattedMapExtent());},getFilter:function(){var attributeFilter=this.attributeQuery&&this.filterBuilder.getFilter();var spatialFilter=this.spatialQuery&&new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,value:this.map.getExtent()});var filter;if(attributeFilter&&spatialFilter){filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[spatialFilter,attributeFilter]});}else{filter=attributeFilter||spatialFilter;}
return filter;},getFieldType:function(attrType){return({"xsd:boolean":"boolean","xsd:int":"int","xsd:integer":"int","xsd:short":"int","xsd:long":"int","xsd:date":"date","xsd:string":"string","xsd:float":"float","xsd:double":"float"})[attrType];},createFeatureStore:function(){var fields=[];this.attributeStore.each(function(record){fields.push({name:record.get("name"),type:this.getFieldType(record.get("type"))});},this);var layer=this.selectedLayer;this.featureStore=new gxp.data.WFSFeatureStore({fields:fields,srsName:this.map.getProjection(),url:layer.get("url"),featureType:layer.get("name"),featureNS:layer.get("namespace"),geometryName:this.geometryName,schema:layer.get("schema"),maxFeatures:this.maxFeatures,autoLoad:false,autoSave:false,listeners:{load:function(store,records,options){this.fireEvent("storeload",this,store,records,options);},scope:this}});this.fireEvent("ready",this,this.featureStore);},query:function(){if(this.featureStore){if(this.fireEvent("beforequery",this)!==false){this.featureStore.setOgcFilter(this.getFilter());this.featureStore.load();this.fireEvent("query",this,this.featureStore);}}},beforeDestroy:function(){if(this.map&&this.map.events){this.map.events.un({moveend:this.updateMapExtent,scope:this});}
gxp.QueryPanel.superclass.beforeDestroy.apply(this,arguments);}});Ext.reg('gxp_querypanel',gxp.QueryPanel);Ext.namespace("gxp");gxp.FilterBuilder=Ext.extend(Ext.Container,{builderTypeNames:["any","all","none","not all"],allowedBuilderTypes:null,allowBlank:false,preComboText:"Match",postComboText:"of the following:",cls:"gxp-filterbuilder",builderType:null,childFilterContainer:null,customizeFilterOnInit:true,addConditionText:"add condition",addGroupText:"add group",removeConditionText:"remove condition",allowGroups:true,initComponent:function(){var defConfig={defaultBuilderType:gxp.FilterBuilder.ANY_OF};Ext.applyIf(this,defConfig);if(this.customizeFilterOnInit){this.filter=this.customizeFilter(this.filter);}
this.builderType=this.getBuilderType();this.items=[{xtype:"container",layout:"form",defaults:{anchor:"100%"},hideLabels:true,items:[{xtype:"compositefield",style:"padding-left: 2px",items:[{xtype:"label",style:"padding-top: 0.3em",text:this.preComboText},this.createBuilderTypeCombo(),{xtype:"label",style:"padding-top: 0.3em",text:this.postComboText}]},this.createChildFiltersPanel(),{xtype:"toolbar",items:this.createToolBar()}]}];this.addEvents("change");gxp.FilterBuilder.superclass.initComponent.call(this);},createToolBar:function(){var bar=[{text:this.addConditionText,iconCls:"add",handler:function(){this.addCondition();},scope:this}];if(this.allowGroups){bar.push({text:this.addGroupText,iconCls:"add",handler:function(){this.addCondition(true);},scope:this});}
return bar;},getFilter:function(){var filter;if(this.filter){filter=this.filter.clone();if(filter instanceof OpenLayers.Filter.Logical){filter=this.cleanFilter(filter);}}
return filter;},cleanFilter:function(filter){if(filter instanceof OpenLayers.Filter.Logical){if(filter.type!==OpenLayers.Filter.Logical.NOT&&filter.filters.length===1){filter=this.cleanFilter(filter.filters[0]);}else{var child;for(var i=0,len=filter.filters.length;i<len;++i){child=filter.filters[i];if(child instanceof OpenLayers.Filter.Logical){child=this.cleanFilter(child);if(child){filter.filters[i]=child;}else{filter=child;break;}}else if(!child||child.type===null||child.property===null||child[filter.type===OpenLayers.Filter.Comparison.BETWEEN?"lowerBoundary":"value"]===null){filter=false;break;}}}}else{if(!filter||filter.type===null||filter.property===null||filter[filter.type===OpenLayers.Filter.Comparison.BETWEEN?"lowerBoundary":"value"]===null){filter=false;}}
return filter;},customizeFilter:function(filter){if(!filter){filter=this.wrapFilter(this.createDefaultFilter());}else{filter=this.cleanFilter(filter);var child,i,len;switch(filter.type){case OpenLayers.Filter.Logical.AND:case OpenLayers.Filter.Logical.OR:if(!filter.filters||filter.filters.length===0){filter.filters=[this.createDefaultFilter()];}else{for(i=0,len=filter.filters.length;i<len;++i){child=filter.filters[i];if(child instanceof OpenLayers.Filter.Logical){filter.filters[i]=this.customizeFilter(child);}}}
filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[filter]});break;case OpenLayers.Filter.Logical.NOT:if(!filter.filters||filter.filters.length===0){filter.filters=[new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[this.createDefaultFilter()]})];}else{child=filter.filters[0];if(child instanceof OpenLayers.Filter.Logical){if(child.type!==OpenLayers.Filter.Logical.NOT){var grandchild;for(i=0,len=child.filters.length;i<len;++i){grandchild=child.filters[i];if(grandchild instanceof OpenLayers.Filter.Logical){child.filters[i]=this.customizeFilter(grandchild);}}}else{if(child.filters&&child.filters.length>0){filter=this.customizeFilter(child.filters[0]);}else{filter=this.wrapFilter(this.createDefaultFilter());}}}else{var type;if(this.defaultBuilderType===gxp.FilterBuilder.NOT_ALL_OF){type=OpenLayers.Filter.Logical.AND;}else{type=OpenLayers.Filter.Logical.OR;}
filter.filters=[new OpenLayers.Filter.Logical({type:type,filters:[child]})];}}
break;default:filter=this.wrapFilter(filter);break;}}
return filter;},createDefaultFilter:function(){return new OpenLayers.Filter.Comparison();},wrapFilter:function(filter){var type;if(this.defaultBuilderType===gxp.FilterBuilder.ALL_OF){type=OpenLayers.Filter.Logical.AND;}else{type=OpenLayers.Filter.Logical.OR;}
return new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[new OpenLayers.Filter.Logical({type:type,filters:[filter]})]});},addCondition:function(group){var filter,type;if(group){type="gxp_filterbuilder";filter=this.wrapFilter(this.createDefaultFilter());}else{type="gxp_filterfield";filter=this.createDefaultFilter();}
var newChild=this.newRow({xtype:type,filter:filter,columnWidth:1,attributes:this.attributes,allowBlank:group?undefined:this.allowBlank,customizeFilterOnInit:group&&false,listeners:{change:function(){this.fireEvent("change",this);},scope:this}});this.childFilterContainer.add(newChild);this.filter.filters[0].filters.push(filter);this.childFilterContainer.doLayout();},removeCondition:function(item,filter){var parent=this.filter.filters[0].filters;if(parent.length>1){parent.remove(filter);this.childFilterContainer.remove(item,true);}
this.fireEvent("change",this);},createBuilderTypeCombo:function(){var types=this.allowedBuilderTypes||[gxp.FilterBuilder.ANY_OF,gxp.FilterBuilder.ALL_OF,gxp.FilterBuilder.NONE_OF];var numTypes=types.length;var data=new Array(numTypes);var type;for(var i=0;i<numTypes;++i){type=types[i];data[i]=[type,this.builderTypeNames[type]];}
return{xtype:"combo",store:new Ext.data.SimpleStore({data:data,fields:["value","name"]}),value:this.builderType,displayField:"name",valueField:"value",triggerAction:"all",mode:"local",listeners:{select:function(combo,record){this.changeBuilderType(record.get("value"));this.fireEvent("change",this);},scope:this},width:60};},changeBuilderType:function(type){if(type!==this.builderType){this.builderType=type;var child=this.filter.filters[0];switch(type){case gxp.FilterBuilder.ANY_OF:this.filter.type=OpenLayers.Filter.Logical.OR;child.type=OpenLayers.Filter.Logical.OR;break;case gxp.FilterBuilder.ALL_OF:this.filter.type=OpenLayers.Filter.Logical.OR;child.type=OpenLayers.Filter.Logical.AND;break;case gxp.FilterBuilder.NONE_OF:this.filter.type=OpenLayers.Filter.Logical.NOT;child.type=OpenLayers.Filter.Logical.OR;break;case gxp.FilterBuilder.NOT_ALL_OF:this.filter.type=OpenLayers.Filter.Logical.NOT;child.type=OpenLayers.Filter.Logical.AND;break;}}},createChildFiltersPanel:function(){this.childFilterContainer=new Ext.Container();var grandchildren=this.filter.filters[0].filters;var grandchild;for(var i=0,len=grandchildren.length;i<len;++i){grandchild=grandchildren[i];var fieldCfg={xtype:"gxp_filterfield",allowBlank:this.allowBlank,columnWidth:1,filter:grandchild,attributes:this.attributes,listeners:{change:function(){this.fireEvent("change",this);},scope:this}};var containerCfg=Ext.applyIf(grandchild instanceof OpenLayers.Filter.Logical?{xtype:"gxp_filterbuilder"}:{xtype:"container",layout:"form",hideLabels:true,items:fieldCfg},fieldCfg);this.childFilterContainer.add(this.newRow(containerCfg));}
return this.childFilterContainer;},newRow:function(filterContainer){var ct=new Ext.Container({layout:"column",items:[{xtype:"container",width:28,height:26,style:"padding-left: 2px",items:{xtype:"button",tooltip:this.removeConditionText,iconCls:"delete",handler:function(btn){this.removeCondition(ct,filterContainer.filter);},scope:this}},filterContainer]});return ct;},getBuilderType:function(){var type=this.defaultBuilderType;if(this.filter){var child=this.filter.filters[0];if(this.filter.type===OpenLayers.Filter.Logical.NOT){switch(child.type){case OpenLayers.Filter.Logical.OR:type=gxp.FilterBuilder.NONE_OF;break;case OpenLayers.Filter.Logical.AND:type=gxp.FilterBuilder.NOT_ALL_OF;break;}}else{switch(child.type){case OpenLayers.Filter.Logical.OR:type=gxp.FilterBuilder.ANY_OF;break;case OpenLayers.Filter.Logical.AND:type=gxp.FilterBuilder.ALL_OF;break;}}}
return type;}});gxp.FilterBuilder.ANY_OF=0;gxp.FilterBuilder.ALL_OF=1;gxp.FilterBuilder.NONE_OF=2;gxp.FilterBuilder.NOT_ALL_OF=3;Ext.reg('gxp_filterbuilder',gxp.FilterBuilder);Ext.namespace("gxp.form");gxp.form.FilterField=Ext.extend(Ext.form.CompositeField,{lowerBoundaryTip:"lower boundary",upperBoundaryTip:"upper boundary",filter:null,attributes:null,attributesComboConfig:null,initComponent:function(){if(!this.filter){this.filter=this.createDefaultFilter();}
var mode="remote",attributes=new GeoExt.data.AttributeStore();if(this.attributes){if(this.attributes.getCount()!=0){mode="local";this.attributes.each(function(r){var match=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/.exec(r.get("type"));match||attributes.add([r]);});}else{attributes=this.attributes;}}
var defAttributesComboConfig={xtype:"combo",store:attributes,editable:mode=="local",typeAhead:true,forceSelection:true,mode:mode,triggerAction:"all",allowBlank:this.allowBlank,displayField:"name",valueField:"name",value:this.filter.property,listeners:{select:function(combo,record){this.items.get(1).enable();this.filter.property=record.get("name");this.fireEvent("change",this.filter);},"blur":function(combo){var index=combo.store.findExact("name",combo.getValue());if(index!=-1){combo.fireEvent("select",combo,combo.store.getAt(index));}else if(combo.startValue!=null){combo.setValue(combo.startValue);}},scope:this},width:120};this.attributesComboConfig=this.attributesComboConfig||{};Ext.applyIf(this.attributesComboConfig,defAttributesComboConfig);this.items=this.createFilterItems();this.addEvents("change");gxp.form.FilterField.superclass.initComponent.call(this);},createDefaultFilter:function(){return new OpenLayers.Filter.Comparison();},createFilterItems:function(){var isBetween=this.filter.type===OpenLayers.Filter.Comparison.BETWEEN;return[this.attributesComboConfig,{xtype:"gxp_comparisoncombo",disabled:this.filter.property==null,allowBlank:this.allowBlank,value:this.filter.type,listeners:{select:function(combo,record){this.items.get(2).enable();this.items.get(3).enable();this.items.get(4).enable();this.setFilterType(record.get("value"));this.fireEvent("change",this.filter);},scope:this}},{xtype:"textfield",disabled:this.filter.type==null,hidden:isBetween,value:this.filter.value,width:50,grow:true,growMin:50,anchor:"100%",allowBlank:this.allowBlank,listeners:{"change":function(field,value){this.filter.value=value;this.fireEvent("change",this.filter);},scope:this}},{xtype:"textfield",disabled:this.filter.type==null,hidden:!isBetween,value:this.filter.lowerBoundary,tooltip:this.lowerBoundaryTip,grow:true,growMin:30,anchor:"100%",allowBlank:this.allowBlank,listeners:{"change":function(field,value){this.filter.lowerBoundary=value;this.fireEvent("change",this.filter);},"render":function(c){Ext.QuickTips.register({target:c.getEl(),text:this.lowerBoundaryTip});},"autosize":function(field,width){field.setWidth(width);field.ownerCt.doLayout();},scope:this}},{xtype:"textfield",disabled:this.filter.type==null,hidden:!isBetween,grow:true,growMin:30,value:this.filter.upperBoundary,allowBlank:this.allowBlank,listeners:{"change":function(field,value){this.filter.upperBoundary=value;this.fireEvent("change",this.filter);},"render":function(c){Ext.QuickTips.register({target:c.getEl(),text:this.upperBoundaryTip});},scope:this}}];},setFilterType:function(type){this.filter.type=type;if(type===OpenLayers.Filter.Comparison.BETWEEN){this.items.get(2).hide();this.items.get(3).show();this.items.get(4).show();}else{this.items.get(2).show();this.items.get(3).hide();this.items.get(4).hide();}
this.doLayout();}});Ext.reg('gxp_filterfield',gxp.form.FilterField);Ext.namespace("gxp.form");gxp.form.ComparisonComboBox=Ext.extend(Ext.form.ComboBox,{allowedTypes:[[OpenLayers.Filter.Comparison.EQUAL_TO,"="],[OpenLayers.Filter.Comparison.NOT_EQUAL_TO,"<>"],[OpenLayers.Filter.Comparison.LESS_THAN,"<"],[OpenLayers.Filter.Comparison.GREATER_THAN,">"],[OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,"<="],[OpenLayers.Filter.Comparison.GREATER_THAN_OR_EQUAL_TO,">="],[OpenLayers.Filter.Comparison.LIKE,"like"],[OpenLayers.Filter.Comparison.BETWEEN,"between"]],allowBlank:false,mode:"local",typeAhead:true,forceSelection:true,triggerAction:"all",width:50,editable:true,initComponent:function(){var defConfig={displayField:"name",valueField:"value",store:new Ext.data.SimpleStore({data:this.allowedTypes,fields:["value","name"]}),value:(this.value===undefined)?this.allowedTypes[0][0]:this.value,listeners:{"blur":function(){var index=this.store.findExact("value",this.getValue());if(index!=-1){this.fireEvent("select",this,this.store.getAt(index));}else if(this.startValue!=null){this.setValue(this.startValue);}}}};Ext.applyIf(this,defConfig);gxp.form.ComparisonComboBox.superclass.initComponent.call(this);}});Ext.reg("gxp_comparisoncombo",gxp.form.ComparisonComboBox);Ext.namespace("gxp.data");gxp.data.WFSFeatureStore=Ext.extend(GeoExt.data.FeatureStore,{setOgcFilter:function(ogcFilter){this.proxy.setFilter(ogcFilter);},constructor:function(config){if(!(config.proxy&&config.proxy instanceof GeoExt.data.ProtocolProxy)){config.proxy=new gxp.data.WFSProtocolProxy(Ext.apply({srsName:config.srsName,url:config.url,featureType:config.featureType,featureNS:config.featureNS,geometryName:config.geometryName,schema:config.schema,filter:config.ogcFilter,maxFeatures:config.maxFeatures,multi:config.multi},config.proxy));}
if(!config.writer){config.writer=new Ext.data.DataWriter({write:Ext.emptyFn});}
gxp.data.WFSFeatureStore.superclass.constructor.apply(this,arguments);this.reader.extractValues=(function(data,items,length){var obj=this.readRecords([data.feature]);return obj.records[0].data;}).createDelegate(this.reader);this.reader.meta.idProperty="id";this.reader.getId=function(data){return data.id;};}});Ext.namespace("gxp.data");gxp.data.WFSProtocolProxy=Ext.extend(GeoExt.data.ProtocolProxy,{setFilter:function(filter){this.protocol.filter=filter;this.protocol.options.filter=filter;},constructor:function(config){Ext.applyIf(config,{version:"1.1.0"});if(!(this.protocol&&this.protocol instanceof OpenLayers.Protocol)){config.protocol=new OpenLayers.Protocol.WFS(Ext.apply({version:config.version,srsName:config.srsName,url:config.url,featureType:config.featureType,featureNS:config.featureNS,geometryName:config.geometryName,schema:config.schema,filter:config.filter,maxFeatures:config.maxFeatures,multi:config.multi},config.protocol));}
gxp.data.WFSProtocolProxy.superclass.constructor.apply(this,arguments);},doRequest:function(action,records,params,reader,callback,scope,arg){delete params.xaction;if(action===Ext.data.Api.actions.read){this.load(params,reader,callback,scope,arg);}else{if(!(records instanceof Array)){records=[records];}
var features=new Array(records.length),feature;Ext.each(records,function(r,i){features[i]=r.getFeature();feature=features[i];feature.modified=Ext.apply(feature.modified||{},{attributes:Ext.apply((feature.modified&&feature.modified.attributes)||{},r.modified)});},this);var o={action:action,records:records,callback:callback,scope:scope};var options={callback:function(response){this.onProtocolCommit(response,o);},scope:this};Ext.applyIf(options,params);this.protocol.commit(features,options);}},onProtocolCommit:function(response,o){if(response.success()){var features=response.reqFeatures;var state,feature;var destroys=[];var insertIds=response.insertIds||[];var i,len,j=0;for(i=0,len=features.length;i<len;++i){feature=features[i];state=feature.state;if(state){if(state==OpenLayers.State.DELETE){destroys.push(feature);}else if(state==OpenLayers.State.INSERT){feature.fid=insertIds[j];++j;}else if(feature.modified){feature.modified={};}
feature.state=null;}}
for(i=0,len=destroys.length;i<len;++i){feature=destroys[i];feature.layer&&feature.layer.destroyFeatures([feature]);}
len=features.length;var data=new Array(len);var f;for(i=0;i<len;++i){f=features[i];data[i]={id:f.id,feature:f,state:null};var fields=o.records[i].fields;for(var a in f.attributes){if(fields.containsKey(a)){data[i][a]=f.attributes[a];}}}
o.callback.call(o.scope,data,response.priv,true);}else{var request=response.priv;if(request.status>=200&&request.status<300){this.fireEvent("exception",this,"remote",o.action,o,response.error,o.records);}else{this.fireEvent("exception",this,"response",o.action,o,request);}
o.callback.call(o.scope,[],request,false);}}});Ext.namespace("gxp.grid");gxp.grid.FeatureGrid=Ext.extend(Ext.grid.GridPanel,{map:null,ignoreFields:null,includeFields:null,layer:null,initComponent:function(){this.ignoreFields=["feature","state","fid"].concat(this.ignoreFields);if(this.store){this.cm=this.createColumnModel(this.store);if(this.map){this.layer=new OpenLayers.Layer.Vector(this.id+"_layer");this.map.addLayer(this.layer);}}else{this.store=new Ext.data.Store();this.cm=new Ext.grid.ColumnModel({columns:[]});}
if(this.layer){this.sm=this.sm||new GeoExt.grid.FeatureSelectionModel({layerFromStore:false,layer:this.layer});if(this.store instanceof GeoExt.data.FeatureStore){this.store.bind(this.layer);}}
if(!this.dateFormat){this.dateFormat=Ext.form.DateField.prototype.format;}
if(!this.timeFormat){this.timeFormat=Ext.form.TimeField.prototype.format;}
gxp.grid.FeatureGrid.superclass.initComponent.call(this);},onDestroy:function(){if(this.initialConfig&&this.initialConfig.map&&!this.initialConfig.layer){this.layer.destroy();delete this.layer;}
gxp.grid.FeatureGrid.superclass.onDestroy.apply(this,arguments);},setStore:function(store,schema){if(schema){this.schema=schema;}
if(store){if(this.store instanceof GeoExt.data.FeatureStore){this.store.unbind();}
if(this.layer){this.layer.destroyFeatures();store.bind(this.layer);}
this.reconfigure(store,this.createColumnModel(store));}else{this.reconfigure(new Ext.data.Store(),new Ext.grid.ColumnModel({columns:[]}));}},getColumns:function(store){function getRenderer(format){return function(value){var date=value;if(typeof value=="string"){date=Date.parseDate(value.replace(/Z$/,""),"c");}
return date?date.format(format):value;};}
var columns=[],customRenderers=this.customRenderers||{},name,type,xtype,format,renderer;(this.schema||store.fields).each(function(f){if(this.schema){name=f.get("name");type=f.get("type").split(":").pop();format=null;switch(type){case"date":format=this.dateFormat;break;case"datetime":format=format?format:this.dateFormat+" "+this.timeFormat;xtype=undefined;renderer=getRenderer(format);break;case"boolean":xtype="booleancolumn";break;case"string":xtype="gridcolumn";break;default:xtype="numbercolumn";break;}}else{name=f.name;}
if(this.ignoreFields.indexOf(name)===-1&&(this.includeFields===null||this.includeFields.indexOf(name)>=0)){columns.push({dataIndex:name,hidden:this.fieldVisibility?(!this.fieldVisibility[name]):false,header:this.propertyNames?(this.propertyNames[name]||name):name,sortable:true,xtype:xtype,format:format,renderer:customRenderers[name]||(xtype?undefined:renderer)});}},this);return columns;},createColumnModel:function(store){var columns=this.getColumns(store);return new Ext.grid.ColumnModel(columns);}});Ext.reg('gxp_featuregrid',gxp.grid.FeatureGrid);Ext.namespace("gxp");gxp.Viewer=Ext.extend(Ext.util.Observable,{defaultToolType:"gxp_tool",tools:null,selectedLayer:null,constructor:function(config){this.addEvents("ready","portalready","beforelayerselectionchange","layerselectionchange","featureedit");Ext.apply(this,{layerSources:{},portalItems:[]});this.createLayerRecordQueue=[];(config.loadConfig||this.loadConfig).call(this,config,this.applyConfig);gxp.Viewer.superclass.constructor.apply(this,arguments);},selectLayer:function(record){record=record||null;var changed=false;var allow=this.fireEvent("beforelayerselectionchange",record);if(allow!==false){changed=true;if(this.selectedLayer){this.selectedLayer.set("selected",false);}
this.selectedLayer=record;if(this.selectedLayer){this.selectedLayer.set("selected",true);}
this.fireEvent("layerselectionchange",record);}
return changed;},loadConfig:function(config){this.applyConfig(config);},applyConfig:function(config){this.initialConfig=Ext.apply({},config);Ext.apply(this,this.initialConfig);this.load();},load:function(){if(this.proxy){OpenLayers.ProxyHost=this.proxy;}
this.initMapPanel();this.initTools();var config,queue=[];for(var key in this.sources){queue.push(this.createSourceLoader(key));}
queue.push(function(done){Ext.onReady(function(){this.initPortal();done();},this);});gxp.util.dispatch(queue,this.activate,this);},createSourceLoader:function(key){return function(done){var config=this.sources[key];config.projection=this.initialConfig.map.projection;this.addLayerSource({id:key,config:config,callback:done,fallback:function(source,msg,details){done();},scope:this});};},addLayerSource:function(options){var id=options.id||Ext.id(null,"gxp-source-");var source;var config=options.config;config.id=id;try{source=Ext.ComponentMgr.createPlugin(config,this.defaultSourceType);}catch(err){throw new Error("Could not create new source plugin with ptype: "+options.config.ptype);}
source.on({ready:{fn:function(){var callback=options.callback||Ext.emptyFn;callback.call(options.scope||this,id);},scope:this,single:true},failure:{fn:function(){var fallback=options.fallback||Ext.emptyFn;delete this.layerSources[id];fallback.apply(options.scope||this,arguments);},scope:this,single:true}});this.layerSources[id]=source;source.init(this);return source;},initMapPanel:function(){var config=Ext.apply({},this.initialConfig.map);var mapConfig={};if(this.initialConfig.map){var props="theme,controls,resolutions,projection,units,maxExtent,restrictedExtent,maxResolution,numZoomLevels,panMethod".split(",");var prop;for(var i=props.length-1;i>=0;--i){prop=props[i];if(prop in config){mapConfig[prop]=config[prop];delete config[prop];}}}
this.mapPanel=Ext.ComponentMgr.create(Ext.applyIf({xtype:config.xtype||"gx_mappanel",map:Ext.applyIf({theme:mapConfig.theme||null,controls:mapConfig.controls||[new OpenLayers.Control.Navigation({zoomWheelOptions:{interval:250}}),new OpenLayers.Control.PanPanel(),new OpenLayers.Control.ZoomPanel(),new OpenLayers.Control.Attribution()],maxExtent:mapConfig.maxExtent&&OpenLayers.Bounds.fromArray(mapConfig.maxExtent),restrictedExtent:mapConfig.restrictedExtent&&OpenLayers.Bounds.fromArray(mapConfig.restrictedExtent),numZoomLevels:mapConfig.numZoomLevels||20},mapConfig),center:config.center&&new OpenLayers.LonLat(config.center[0],config.center[1]),resolutions:config.resolutions,forceInitialExtent:true,layers:null,items:this.mapItems,plugins:this.mapPlugins,tbar:config.tbar||{hidden:true}},config));this.mapPanel.layers.on({"add":function(store,records){var record;for(var i=records.length-1;i>=0;i--){record=records[i];if(record.get("selected")===true){this.selectLayer(record);}}},"remove":function(store,record){if(record.get("selected")===true){this.selectLayer();}},scope:this});},initTools:function(){this.tools={};if(this.initialConfig.tools&&this.initialConfig.tools.length>0){var tool;for(var i=0,len=this.initialConfig.tools.length;i<len;i++){try{tool=Ext.ComponentMgr.createPlugin(this.initialConfig.tools[i],this.defaultToolType);}catch(err){throw new Error("Could not create tool plugin with ptype: "+this.initialConfig.tools[i].ptype);}
tool.init(this);}}},initPortal:function(){var config=this.portalConfig||{};if(this.portalItems.length===0){this.mapPanel.region="center";this.portalItems.push(this.mapPanel);}
this.portal=Ext.ComponentMgr.create(Ext.applyIf(config,{layout:"fit",hideBorders:true,items:{layout:"border",deferredRender:false,items:this.portalItems}}),config.renderTo?"panel":"viewport");this.fireEvent("portalready");},activate:function(){Ext.QuickTips.init();this.addLayers();this.checkLayerRecordQueue();this.fireEvent("ready");},addLayers:function(){var mapConfig=this.initialConfig.map;if(mapConfig&&mapConfig.layers){var conf,source,record,baseRecords=[],overlayRecords=[];for(var i=0;i<mapConfig.layers.length;++i){conf=mapConfig.layers[i];source=this.layerSources[conf.source];if(source){record=source.createLayerRecord(conf);if(record){if(record.get("group")==="background"){baseRecords.push(record);}else{overlayRecords.push(record);}}}}
baseRecords.sort(function(a,b){return a.getLayer().visibility<b.getLayer().visibility;});var panel=this.mapPanel;var map=panel.map;var records=baseRecords.concat(overlayRecords);if(records.length){panel.layers.add(records);}}},getLayerRecordFromMap:function(config){var record=null;if(this.mapPanel){this.mapPanel.layers.each(function(rec){if(rec.get("source")==config.source&&rec.get("name")==config.name){record=rec;return false;}});}
return record;},createLayerRecord:function(config,callback,scope){this.createLayerRecordQueue.push({config:config,callback:callback,scope:scope});this.checkLayerRecordQueue();},checkLayerRecordQueue:function(){var request,source,record,called;var remaining=[];for(var i=0,ii=this.createLayerRecordQueue.length;i<ii;++i){called=false;request=this.createLayerRecordQueue[i];source=request.config.source;if(source in this.layerSources){record=this.layerSources[source].createLayerRecord(request.config);if(record){(function(req,rec){window.setTimeout(function(){req.callback.call(req.scope,rec);},0);})(request,record);called=true;}}
if(!called){remaining.push(request);}}
this.createLayerRecordQueue=remaining;},getSource:function(layerRec){return layerRec&&this.layerSources[layerRec.get("source")];},getState:function(){var state=Ext.apply({},this.initialConfig);var center=this.mapPanel.map.getCenter();Ext.apply(state.map,{center:[center.lon,center.lat],zoom:this.mapPanel.map.zoom,layers:[]});this.mapPanel.layers.each(function(record){var layer=record.getLayer();if(layer.displayInLayerSwitcher){var id=record.get("source");var source=this.layerSources[id];if(!source){throw new Error("Could not find source for layer '"+record.get("name")+"'");}
state.map.layers.push(source.getConfigForRecord(record));if(!state.sources[id]){state.sources[id]=Ext.apply({},source.initialConfig);}}},this);return state;},isAuthorized:function(role){return!this.authorizedRoles||(this.authorizedRoles.indexOf(role||"ROLE_ADMINISTRATOR")!==-1);},isAuthenticated:function(role){return!this.authorizedRoles||this.authorizedRoles.length>0;},destroy:function(){this.mapPanel.destroy();this.portal&&this.portal.destroy();}});(function(){OpenLayers.DOTS_PER_INCH=25.4/0.28;})();Ext.namespace("gxp.form");gxp.form.ViewerField=Ext.extend(Ext.form.TextArea,{viewer:null,initComponent:function(){this.width=this.width||350;this.height=this.height||220;gxp.form.ViewerField.superclass.initComponent.call(this);},onRender:function(){if(!this.el){this.defaultAutoCreate={tag:"textarea",style:{color:"transparent",background:"none"}};}
gxp.form.ViewerField.superclass.onRender.apply(this,arguments);this.viewerEl=Ext.get(document.createElement("div"));this.viewerEl.setStyle("position","absolute");this.viewerEl.on({"mouseenter":function(){this.hasFocus||this.el.focus();},"mousemove":function(){this.hasFocus||this.el.focus();},"mouseleave":function(){this.hasFocus&&this.el.blur();},scope:this});this.el.dom.parentNode.appendChild(this.viewerEl.dom);this.viewerEl.anchorTo(this.el,"tl-tl");var portalConfig={border:false,renderTo:this.viewerEl,width:this.width,height:this.height,style:"border: 1px solid transparent"};var config=Ext.applyIf(this.initialConfig.viewer||{},{field:this,portalConfig:portalConfig});Ext.apply(config.portalConfig,portalConfig);this.viewer=new gxp.Viewer(config);}});Ext.reg("gxp_viewerfield",gxp.form.ViewerField);Ext.namespace("gxp");gxp.ScaleOverlay=Ext.extend(Ext.Panel,{map:null,zoomLevelText:"Zoom level",initComponent:function(){gxp.ScaleOverlay.superclass.initComponent.call(this);this.cls='map-overlay';if(this.map){if(this.map instanceof GeoExt.MapPanel){this.map=this.map.map;}
this.bind(this.map);}
this.on("beforedestroy",this.unbind,this);},addToMapPanel:function(panel){this.on({afterrender:function(){this.bind(panel.map);},scope:this});},stopMouseEvents:function(e){e.stopEvent();},removeFromMapPanel:function(panel){var el=this.getEl();el.un("mousedown",this.stopMouseEvents,this);el.un("click",this.stopMouseEvents,this);this.unbind();},addScaleLine:function(){var scaleLinePanel=new Ext.BoxComponent({autoEl:{tag:"div",cls:"olControlScaleLine overlay-element overlay-scaleline"}});this.on("afterlayout",function(){scaleLinePanel.getEl().dom.style.position='relative';scaleLinePanel.getEl().dom.style.display='inline';this.getEl().on("click",this.stopMouseEvents,this);this.getEl().on("mousedown",this.stopMouseEvents,this);},this);scaleLinePanel.on('render',function(){var scaleLine=new OpenLayers.Control.ScaleLine({geodesic:true,div:scaleLinePanel.getEl().dom});this.map.addControl(scaleLine);scaleLine.activate();},this);this.add(scaleLinePanel);},handleZoomEnd:function(){var scale=this.zoomStore.queryBy(function(record){return this.map.getZoom()==record.data.level;},this);if(scale.length>0){scale=scale.items[0];this.zoomSelector.setValue("1 : "+parseInt(scale.data.scale,10));}else{if(!this.zoomSelector.rendered){return;}
this.zoomSelector.clearValue();}},addScaleCombo:function(){this.zoomStore=new GeoExt.data.ScaleStore({map:this.map});this.zoomSelector=new Ext.form.ComboBox({emptyText:this.zoomLevelText,tpl:'<tpl for="."><div class="x-combo-list-item">1 : {[parseInt(values.scale)]}</div></tpl>',editable:false,triggerAction:'all',mode:'local',store:this.zoomStore,width:110});this.zoomSelector.on({click:this.stopMouseEvents,mousedown:this.stopMouseEvents,select:function(combo,record,index){this.map.zoomTo(record.data.level);},scope:this});this.map.events.register('zoomend',this,this.handleZoomEnd);var zoomSelectorWrapper=new Ext.Panel({items:[this.zoomSelector],cls:'overlay-element overlay-scalechooser',border:false});this.add(zoomSelectorWrapper);},bind:function(map){this.map=map;this.addScaleLine();this.addScaleCombo();this.doLayout();},unbind:function(){if(this.map&&this.map.events){this.map.events.unregister('zoomend',this,this.handleZoomEnd);}
this.zoomStore=null;this.zoomSelector=null;}});Ext.reg('gxp_scaleoverlay',gxp.ScaleOverlay);Ext.namespace("gxp.plugins");gxp.plugins.Tool=Ext.extend(Ext.util.Observable,{ptype:"gxp_tool",autoActivate:true,actionTarget:"map.tbar",output:null,constructor:function(config){this.initialConfig=config||{};this.active=false;Ext.apply(this,config);if(!this.id){this.id=Ext.id();}
this.output=[];this.addEvents("activate","deactivate");gxp.plugins.Tool.superclass.constructor.apply(this,arguments);},init:function(target){target.tools[this.id]=this;this.target=target;this.autoActivate&&this.activate();this.target.on("portalready",this.addActions,this);},activate:function(){if(this.active===false){this.active=true;this.fireEvent("activate",this);return true;}},deactivate:function(){if(this.active===true){this.active=false;this.fireEvent("deactivate",this);return true;}},addActions:function(actions){actions=actions||this.actions;if(!actions||this.actionTarget===null){this.addOutput();return;}
var actionTargets=this.actionTarget instanceof Array?this.actionTarget:[this.actionTarget];var a=actions instanceof Array?actions:[actions];var action,actionTarget,i,j,jj,parts,ref,item,ct,meth,index=null;for(i=actionTargets.length-1;i>=0;--i){actionTarget=actionTargets[i];if(actionTarget){if(actionTarget instanceof Object){index=actionTarget.index;actionTarget=actionTarget.target;}
parts=actionTarget.split(".");ref=parts[0];item=parts.length>1&&parts[1];ct=ref?ref=="map"?this.target.mapPanel:(Ext.getCmp(ref)||this.target.portal[ref]):this.target.portal;if(item){meth={"tbar":"getTopToolbar","bbar":"getBottomToolbar","fbar":"getFooterToolbar"}[item];if(meth){ct=ct[meth]();}else{ct=ct[item];}}}
for(j=0,jj=a.length;j<jj;++j){if(!(a[j]instanceof Ext.Action||a[j]instanceof Ext.Component)){if(typeof a[j]!="string"){if(j==this.defaultAction){a[j].pressed=true;}
a[j]=new Ext.Action(a[j]);}}
action=a[j];if(j==this.defaultAction&&action instanceof GeoExt.Action){action.isDisabled()?action.activateOnEnable=true:action.control.activate();}
if(ct){if(ct instanceof Ext.menu.Menu){action=Ext.apply(new Ext.menu.Item(action),{text:action.initialConfig.menuText});}else if(!(ct instanceof Ext.Toolbar)){action=new Ext.Button(action);}
var addedAction=(index===null)?ct.add(action):ct.insert(index,action);action=action instanceof Ext.Button?action:addedAction;if(index!==null){index+=1;}
if(this.outputAction!=null&&j==this.outputAction){var cmp;action.on("click",function(){if(cmp){this.outputTarget?cmp.show():cmp.ownerCt.ownerCt.show();}else{cmp=this.addOutput();}},this);}}}
if(ct){ct.isVisible()?ct.doLayout():ct instanceof Ext.menu.Menu||ct.show();}}
this.actions=a;return this.actions;},addOutput:function(config){if(!config&&!this.outputConfig){return;}
config=config||{};var ref=this.outputTarget;var container;if(ref){if(ref==="map"){container=this.target.mapPanel;}else{container=Ext.getCmp(ref)||this.target.portal[ref];}
Ext.apply(config,this.outputConfig);}else{var outputConfig=this.outputConfig||{};container=new Ext.Window(Ext.apply({hideBorders:true,shadow:false,closeAction:"hide",autoHeight:!outputConfig.height,layout:outputConfig.height?"fit":undefined,items:[{defaults:Ext.applyIf({autoHeight:!outputConfig.height&&!(outputConfig.defaults&&outputConfig.defaults.height)},outputConfig.defaults)}]},outputConfig)).show().items.get(0);}
var component=container.add(config);if(component instanceof Ext.Window){component.show();}else{container.doLayout();}
this.output.push(component);return component;},removeOutput:function(){var cmp;for(var i=this.output.length-1;i>=0;--i){cmp=this.output[i];if(!this.outputTarget){cmp.findParentBy(function(p){return p instanceof Ext.Window;}).close();}else{if(cmp.ownerCt){cmp.ownerCt.remove(cmp);if(cmp.ownerCt instanceof Ext.Window){cmp.ownerCt[cmp.ownerCt.closeAction]();}}else{cmp.remove();}}}
this.output=[];}});Ext.preg(gxp.plugins.Tool.prototype.ptype,gxp.plugins.Tool);Ext.namespace("gxp.plugins");gxp.plugins.ClickableFeatures=Ext.extend(gxp.plugins.Tool,{featureManager:null,toleranceParameters:["BUFFER","RADIUS"],noFeatureClick:function(evt){if(!this.selectControl){this.selectControl=new OpenLayers.Control.SelectFeature(this.target.tools[this.featureManager].featureLayer,this.initialConfig.controlOptions);}
var evtLL=this.target.mapPanel.map.getLonLatFromPixel(evt.xy);var featureManager=this.target.tools[this.featureManager];var page=featureManager.page;if(featureManager.visible()=="all"&&featureManager.paging&&page&&page.extent.containsLonLat(evtLL)){return;}
var layer=featureManager.layerRecord&&featureManager.layerRecord.getLayer();if(!layer){return;}
var map=this.target.mapPanel.map;var size=map.getSize();var params=Ext.applyIf({REQUEST:"GetFeatureInfo",BBOX:map.getExtent().toBBOX(),WIDTH:size.w,HEIGHT:size.h,X:parseInt(evt.xy.x),Y:parseInt(evt.xy.y),QUERY_LAYERS:layer.params.LAYERS,INFO_FORMAT:"application/vnd.ogc.gml",EXCEPTIONS:"application/vnd.ogc.se_xml",FEATURE_COUNT:1},layer.params);if(typeof this.tolerance==="number"){for(var i=0,ii=this.toleranceParameters.length;i<ii;++i){params[this.toleranceParameters[i]]=this.tolerance;}}
var projection=map.getProjectionObject();var layerProj=layer.projection;if(layerProj&&layerProj.equals(projection)){projection=layerProj;}
if(parseFloat(layer.params.VERSION)>=1.3){params.CRS=projection.getCode();}else{params.SRS=projection.getCode();}
var store=new GeoExt.data.FeatureStore({fields:{},proxy:new GeoExt.data.ProtocolProxy({protocol:new OpenLayers.Protocol.HTTP({url:(typeof layer.url==="string")?layer.url:layer.url[0],params:params,format:new OpenLayers.Format.WMSGetFeatureInfo()})}),autoLoad:true,listeners:{"load":function(store,records){if(records.length>0){var fid=records[0].get("fid");var filter=new OpenLayers.Filter.FeatureId({fids:[fid]});var autoLoad=function(){featureManager.loadFeatures(filter,function(features){if(features.length){this.autoLoadedFeature=features[0];this.select(features[0]);}},this);}.createDelegate(this);var feature=featureManager.featureLayer.getFeatureByFid(fid);if(feature){this.select(feature);}else if(featureManager.paging&&featureManager.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){var lonLat=this.target.mapPanel.map.getLonLatFromPixel(evt.xy);featureManager.setPage({lonLat:lonLat},function(){var feature=featureManager.featureLayer.getFeatureByFid(fid);if(feature){this.select(feature);}else if(this.autoLoadFeatures===true){autoLoad();}},this);}else{autoLoad();}}},scope:this}});},select:function(feature){this.selectControl.unselectAll();this.selectControl.select(feature);}});Ext.namespace("gxp.plugins");gxp.plugins.FeatureEditor=Ext.extend(gxp.plugins.ClickableFeatures,{ptype:"gxp_featureeditor",iconClsAdd:"gxp-icon-addfeature",iconClsEdit:"gxp-icon-editfeature",exceptionTitle:"Save Failed",exceptionText:"Trouble saving features",createFeatureActionTip:"Create a new feature",editFeatureActionTip:"Edit existing feature",outputTarget:"map",snappingAgent:null,readOnly:false,modifyOnly:false,autoLoadFeatures:false,showSelectedOnly:true,drawControl:null,popup:null,autoLoadedFeature:null,schema:null,constructor:function(config){this.addEvents("layereditable","featureeditable");gxp.plugins.FeatureEditor.superclass.constructor.apply(this,arguments);},addActions:function(){var popup;var featureManager=this.getFeatureManager();var featureLayer=featureManager.featureLayer;var intercepting=false;function intercept(mgr,fn){var fnArgs=Array.prototype.slice.call(arguments);fnArgs.splice(0,2);if(!intercepting&&popup&&!popup.isDestroyed){if(popup.editing){function doIt(){intercepting=true;unregisterDoIt.call(this);if(fn==="setLayer"){this.target.selectLayer(fnArgs[0]);}else if(fn==="clearFeatures"){window.setTimeout(function(){mgr[fn].call(mgr);});}else{mgr[fn].apply(mgr,fnArgs);}}
function unregisterDoIt(){featureManager.featureStore.un("write",doIt,this);popup.un("canceledit",doIt,this);popup.un("cancelclose",unregisterDoIt,this);}
featureManager.featureStore.on("write",doIt,this);popup.on({canceledit:doIt,cancelclose:unregisterDoIt,scope:this});popup.close();}
return!popup.editing;}
intercepting=false;}
featureManager.on({"beforequery":intercept.createDelegate(this,"loadFeatures",1),"beforelayerchange":intercept.createDelegate(this,"setLayer",1),"beforesetpage":intercept.createDelegate(this,"setPage",1),"beforeclearfeatures":intercept.createDelegate(this,"clearFeatures",1),scope:this});this.drawControl=new OpenLayers.Control.DrawFeature(featureLayer,OpenLayers.Handler.Point,{eventListeners:{featureadded:function(evt){if(this.autoLoadFeatures===true){this.autoLoadedFeature=evt.feature;}},activate:function(){featureManager.showLayer(this.id,this.showSelectedOnly&&"selected");},deactivate:function(){featureManager.hideLayer(this.id);},scope:this}});this.selectControl=new OpenLayers.Control.SelectFeature(featureLayer,{clickout:false,multipleKey:"fakeKey",unselect:function(){if(!featureManager.featureStore.getModifiedRecords().length){OpenLayers.Control.SelectFeature.prototype.unselect.apply(this,arguments);}},eventListeners:{"activate":function(){if(this.autoLoadFeatures===true||featureManager.paging){this.target.mapPanel.map.events.register("click",this,this.noFeatureClick);}
featureManager.showLayer(this.id,this.showSelectedOnly&&"selected");this.selectControl.unselectAll(popup&&popup.editing&&{except:popup.feature});},"deactivate":function(){if(this.autoLoadFeatures===true||featureManager.paging){this.target.mapPanel.map.events.unregister("click",this,this.noFeatureClick);}
if(popup){if(popup.editing){popup.on("cancelclose",function(){this.selectControl.activate();},this,{single:true});}
popup.on("close",function(){featureManager.hideLayer(this.id);},this,{single:true});popup.close();}else{featureManager.hideLayer(this.id);}},scope:this}});featureLayer.events.on({"beforefeatureremoved":function(evt){if(this.popup&&evt.feature===this.popup.feature){this.selectControl.unselect(evt.feature);}},"featureunselected":function(evt){var feature=evt.feature;if(feature){this.fireEvent("featureeditable",this,feature,false);}
if(popup&&!popup.hidden){popup.close();}},"beforefeatureselected":function(evt){if(popup){return!popup.editing;}},"featureselected":function(evt){var feature=evt.feature;if(feature){this.fireEvent("featureeditable",this,feature,true);}
var featureStore=featureManager.featureStore;if(this.selectControl.active&&feature.geometry!==null){if(this.readOnly===false){this.selectControl.deactivate();featureManager.showLayer(this.id,this.showSelectedOnly&&"selected");}
popup=this.addOutput({xtype:"gxp_featureeditpopup",collapsible:true,feature:featureStore.getByFeature(feature),vertexRenderIntent:"vertex",readOnly:this.readOnly,fields:this.fields,excludeFields:this.excludeFields,editing:feature.state===OpenLayers.State.INSERT,schema:this.schema,allowDelete:true,width:200,height:250,listeners:{"close":function(){if(this.readOnly===false){this.selectControl.activate();}
if(feature.layer&&feature.layer.selectedFeatures.indexOf(feature)!==-1){this.selectControl.unselect(feature);}
if(feature===this.autoLoadedFeature){if(feature.layer){feature.layer.removeFeatures([evt.feature]);}
this.autoLoadedFeature=null;}},"featuremodified":function(popup,feature){popup.disable();featureStore.on({write:{fn:function(){if(popup&&popup.isVisible()){popup.enable();}
var layer=featureManager.layerRecord;this.target.fireEvent("featureedit",featureManager,{name:layer.get("name"),source:layer.get("source")});},single:true},exception:{fn:function(proxy,type,action,options,response,records){var msg=this.exceptionText;if(type==="remote"){if(response.exceptionReport){msg=gxp.util.getOGCExceptionText(response.exceptionReport);}}else{msg="Status: "+response.status;}
featureManager.fireEvent("exception",featureManager,response.exceptionReport||{},msg,records);if(featureManager.hasListener("exception")===false&&featureStore.hasListener("exception")===false){Ext.Msg.show({title:this.exceptionTitle,msg:msg,icon:Ext.MessageBox.ERROR,buttons:{ok:true}});}
if(popup&&popup.isVisible()){popup.enable();popup.startEditing();}},single:true},scope:this});if(feature.state===OpenLayers.State.DELETE){featureStore._removing=true;featureStore.remove(featureStore.getRecordFromFeature(feature));delete featureStore._removing;}
featureStore.save();},"canceledit":function(popup,feature){featureStore.commitChanges();},scope:this}});this.popup=popup;}},"sketchcomplete":function(evt){featureManager.featureLayer.events.register("featuresadded",this,function(evt){featureManager.featureLayer.events.unregister("featuresadded",this,arguments.callee);this.drawControl.deactivate();this.selectControl.activate();this.selectControl.select(evt.features[0]);});},scope:this});var toggleGroup=this.toggleGroup||Ext.id();var actions=gxp.plugins.FeatureEditor.superclass.addActions.call(this,[new GeoExt.Action({tooltip:this.createFeatureActionTip,text:this.createFeatureActionText,iconCls:this.iconClsAdd,disabled:true,hidden:this.modifyOnly||this.readOnly,toggleGroup:toggleGroup,enableToggle:true,allowDepress:true,control:this.drawControl,deactivateOnDisable:true,map:this.target.mapPanel.map}),new GeoExt.Action({tooltip:this.editFeatureActionTip,text:this.editFeatureActionText,iconCls:this.iconClsEdit,disabled:true,toggleGroup:toggleGroup,enableToggle:true,allowDepress:true,control:this.selectControl,deactivateOnDisable:true,map:this.target.mapPanel.map})]);featureManager.on("layerchange",this.onLayerChange,this);var snappingAgent=this.getSnappingAgent();if(snappingAgent){snappingAgent.registerEditor(this);}
return actions;},getFeatureManager:function(){var manager=this.target.tools[this.featureManager];if(!manager){throw new Error("Unable to access feature manager by id: "+this.featureManager);}
return manager;},getSnappingAgent:function(){var agent;var snapId=this.snappingAgent;if(snapId){agent=this.target.tools[snapId];if(!agent){throw new Error("Unable to locate snapping agent with id: "+snapId);}}
return agent;},onLayerChange:function(mgr,layer,schema){this.schema=schema;var disable=!schema||!this.target.isAuthorized();this.actions[0].setDisabled(disable);this.actions[1].setDisabled(disable);if(disable){this.fireEvent("layereditable",this,layer,false);return;}
var control=this.drawControl;var button=this.actions[0];var handlers={"Point":OpenLayers.Handler.Point,"Line":OpenLayers.Handler.Path,"Curve":OpenLayers.Handler.Path,"Polygon":OpenLayers.Handler.Polygon,"Surface":OpenLayers.Handler.Polygon};var simpleType=mgr.geometryType.replace("Multi","");var Handler=handlers[simpleType];if(Handler){var active=control.active;if(active){control.deactivate();}
control.handler=new Handler(control,control.callbacks,Ext.apply(control.handlerOptions,{multi:(simpleType!=mgr.geometryType)}));if(active){control.activate();}
button.enable();}else{button.disable();}
this.fireEvent("layereditable",this,layer,true);},select:function(feature){this.selectControl.unselectAll(this.popup&&this.popup.editing&&{except:this.popup.feature});this.selectControl.select(feature);}});Ext.preg(gxp.plugins.FeatureEditor.prototype.ptype,gxp.plugins.FeatureEditor);Ext.namespace("gxp.plugins");gxp.plugins.FeatureGrid=Ext.extend(gxp.plugins.ClickableFeatures,{ptype:"gxp_featuregrid",schema:null,showTotalResults:false,alwaysDisplayOnMap:false,displayMode:"all",autoExpand:false,autoCollapse:false,selectOnMap:false,displayFeatureText:"Display on map",firstPageTip:"First page",previousPageTip:"Previous page",zoomPageExtentTip:"Zoom to page extent",nextPageTip:"Next page",lastPageTip:"Last page",totalMsg:"Total: {0} records",displayTotalResults:function(){var featureManager=this.target.tools[this.featureManager];if(this.showTotalResults===true&&featureManager.numberOfFeatures!==null){this.displayItem.setText(String.format(this.totalMsg,featureManager.numberOfFeatures));}},addOutput:function(config){var featureManager=this.target.tools[this.featureManager];var map=this.target.mapPanel.map,smCfg;this.selectControl=new OpenLayers.Control.SelectFeature(featureManager.featureLayer,this.initialConfig.controlOptions);if(this.selectOnMap){if(featureManager.paging){this.selectControl.events.on({"activate":function(){map.events.register("click",this,this.noFeatureClick);},"deactivate":function(){map.events.unregister("click",this,this.noFeatureClick);},scope:this});}
map.addControl(this.selectControl);smCfg={selectControl:this.selectControl};}else{smCfg={selectControl:this.selectControl,singleSelect:false,autoActivateControl:false,listeners:{"beforerowselect":function(){if(this.selectControl.active||featureManager.featureStore.getModifiedRecords().length){return false;}},scope:this}};}
this.displayItem=new Ext.Toolbar.TextItem({});config=Ext.apply({xtype:"gxp_featuregrid",sm:new GeoExt.grid.FeatureSelectionModel(smCfg),autoScroll:true,bbar:(featureManager.paging?[{iconCls:"x-tbar-page-first",ref:"../firstPageButton",tooltip:this.firstPageTip,disabled:true,handler:function(){featureManager.setPage({index:0});}},{iconCls:"x-tbar-page-prev",ref:"../prevPageButton",tooltip:this.previousPageTip,disabled:true,handler:function(){featureManager.previousPage();}},{iconCls:"gxp-icon-zoom-to",ref:"../zoomToPageButton",tooltip:this.zoomPageExtentTip,disabled:true,hidden:featureManager.autoZoomPage,handler:function(){var extent=featureManager.getPageExtent();if(extent!==null){map.zoomToExtent(extent);}}},{iconCls:"x-tbar-page-next",ref:"../nextPageButton",tooltip:this.nextPageTip,disabled:true,handler:function(){featureManager.nextPage();}},{iconCls:"x-tbar-page-last",ref:"../lastPageButton",tooltip:this.lastPageTip,disabled:true,handler:function(){featureManager.setPage({index:"last"});}},{xtype:'tbspacer',width:10},this.displayItem]:[]).concat(["->"].concat(!this.alwaysDisplayOnMap?[{text:this.displayFeatureText,enableToggle:true,toggleHandler:function(btn,pressed){this.selectOnMap&&this.selectControl[pressed?"activate":"deactivate"]();featureManager[pressed?"showLayer":"hideLayer"](this.id,this.displayMode);},scope:this}]:[])),listeners:{"added":function(cmp,ownerCt){var onClear=(function(){this.displayTotalResults();this.selectOnMap&&this.selectControl.deactivate();this.autoCollapse&&typeof ownerCt.collapse=="function"&&ownerCt.collapse();}).bind(this);var onPopulate=(function(){this.displayTotalResults();this.selectOnMap&&this.selectControl.activate();this.autoExpand&&typeof ownerCt.expand=="function"&&ownerCt.expand();}).bind(this);featureManager.on({"query":function(tool,store){store&&store.getCount()?onPopulate():onClear();},"layerchange":onClear,"clearfeatures":onClear});},contextmenu:function(event){if(featureGrid.contextMenu.items.getCount()>0){var rowIndex=featureGrid.getView().findRowIndex(event.getTarget());if(rowIndex!==false){featureGrid.getSelectionModel().selectRow(rowIndex);featureGrid.contextMenu.showAt(event.getXY());event.stopEvent();}}},scope:this},contextMenu:new Ext.menu.Menu({items:[]})},config||{});var featureGrid=gxp.plugins.FeatureGrid.superclass.addOutput.call(this,config);if(this.alwaysDisplayOnMap||this.selectOnMap){featureManager.showLayer(this.id,this.displayMode);}
featureManager.paging&&featureManager.on({"beforesetpage":function(){featureGrid.zoomToPageButton.disable();},"setpage":function(mgr,condition,callback,scope,pageIndex,numPages){var paging=(numPages>0);featureGrid.zoomToPageButton.setDisabled(!paging);var prev=(paging&&(pageIndex!==0));featureGrid.firstPageButton.setDisabled(!prev);featureGrid.prevPageButton.setDisabled(!prev);var next=(paging&&(pageIndex!==numPages-1));featureGrid.lastPageButton.setDisabled(!next);featureGrid.nextPageButton.setDisabled(!next);},scope:this});function onLayerChange(){var schema=featureManager.schema,ignoreFields=["feature","state","fid"];schema&&schema.each(function(r){r.get("type").indexOf("gml:")==0&&ignoreFields.push(r.get("name"));});featureGrid.ignoreFields=ignoreFields;featureGrid.setStore(featureManager.featureStore,schema);}
if(featureManager.featureStore){onLayerChange.call(this);}
featureManager.on("layerchange",onLayerChange,this);return featureGrid;}});Ext.preg(gxp.plugins.FeatureGrid.prototype.ptype,gxp.plugins.FeatureGrid);Ext.namespace("gxp.plugins");gxp.plugins.FeatureManager=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_featuremanager",maxFeatures:100,paging:true,pagingType:null,autoZoomPage:false,autoSetLayer:true,autoLoadFeatures:false,layerRecord:null,featureStore:null,hitCountProtocol:null,featureLayer:null,schema:null,geometryType:null,toolsShowingLayer:null,style:null,pages:null,page:null,numberOfFeatures:null,numPages:null,pageIndex:null,constructor:function(config){this.addEvents("beforequery","query","beforelayerchange","layerchange","beforesetpage","setpage","beforeclearfeatures","clearfeatures","beforesave","exception");if(config&&!config.pagingType){this.pagingType=gxp.plugins.FeatureManager.QUADTREE_PAGING;}
if(config&&config.layer){this.autoSetLayer=false;}
gxp.plugins.FeatureManager.superclass.constructor.apply(this,arguments);},init:function(target){gxp.plugins.FeatureManager.superclass.init.apply(this,arguments);this.toolsShowingLayer={};this.style={"all":new OpenLayers.Style(null,{rules:[new OpenLayers.Rule({symbolizer:this.initialConfig.symbolizer||{"Point":{pointRadius:4,graphicName:"square",fillColor:"white",fillOpacity:1,strokeWidth:1,strokeOpacity:1,strokeColor:"#333333"},"Line":{strokeWidth:4,strokeOpacity:1,strokeColor:"#ff9933"},"Polygon":{strokeWidth:2,strokeOpacity:1,strokeColor:"#ff6633",fillColor:"white",fillOpacity:0.3}}})]}),"selected":new OpenLayers.Style(null,{rules:[new OpenLayers.Rule({symbolizer:{display:"none"}})]})};this.featureLayer=new OpenLayers.Layer.Vector(this.id,{displayInLayerSwitcher:false,visibility:false,styleMap:new OpenLayers.StyleMap({"select":OpenLayers.Util.extend({display:""},OpenLayers.Feature.Vector.style["select"]),"vertex":this.style["all"]},{extendDefault:false})});this.target.on({ready:function(){this.target.mapPanel.map.addLayer(this.featureLayer);},scope:this});this.on({beforedestroy:function(){this.target.mapPanel.map.removeLayer(this.featureLayer);},scope:this});},activate:function(){if(gxp.plugins.FeatureManager.superclass.activate.apply(this,arguments)){if(this.autoSetLayer){this.target.on("beforelayerselectionchange",this.setLayer,this);}
if(this.layer){this.target.createLayerRecord(this.layer,this.setLayer,this);}
this.on("layerchange",this.setSchema,this);return true;}},deactivate:function(){if(gxp.plugins.FeatureManager.superclass.deactivate.apply(this,arguments)){if(this.autoSetLayer){this.target.un("beforelayerselectionchange",this.setLayer,this);}
this.un("layerchange",this.setSchema,this);this.setLayer();return true;}},getPageExtent:function(){if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){return this.page.extent;}else{return this.featureStore.layer.getDataExtent();}},setLayer:function(layerRecord){var change=this.fireEvent("beforelayerchange",this,layerRecord);if(change!==false){if(layerRecord){this.featureLayer.projection=this.getProjection(layerRecord);}
if(layerRecord!==this.layerRecord){this.clearFeatureStore();this.layerRecord=layerRecord;if(layerRecord){this.autoLoadFeatures===true?this.loadFeatures():this.setFeatureStore();}else{this.fireEvent("layerchange",this,null);}}}
return change;},setSchema:function(mgr,layer,schema){this.schema=schema;},showLayer:function(id,display){this.toolsShowingLayer[id]=display||"all";this.setLayerDisplay();},hideLayer:function(id){delete this.toolsShowingLayer[id];this.setLayerDisplay();},setLayerDisplay:function(){var show=this.visible();var map=this.target.mapPanel.map;if(show){var style=this.style[show];if(style!==this.featureLayer.styleMap.styles["default"]){this.featureLayer.styleMap.styles["default"]=style;this.featureLayer.redraw();}
this.featureLayer.setVisibility(true);map.events.on({addlayer:this.raiseLayer,scope:this});}else if(this.featureLayer.map){this.featureLayer.setVisibility(false);map.events.un({addlayer:this.raiseLayer,scope:this});}},visible:function(){var show=false;for(var i in this.toolsShowingLayer){if(show!="all"){show=this.toolsShowingLayer[i];}}
return show;},raiseLayer:function(){var map=this.featureLayer&&this.featureLayer.map;if(map){map.setLayerIndex(this.featureLayer,map.layers.length);}},loadFeatures:function(filter,callback,scope){if(this.fireEvent("beforequery",this,filter,callback,scope)!==false){this.filter=filter;this.pages=null;if(callback){var me=this;me._activeQuery&&me.un("query",me._activeQuery);this.on("query",me._activeQuery=function(tool,store){delete me._activeQuery;this.un("query",arguments.callee,this);var len=store.getCount();if(store.getCount()==0){callback.call(scope,[]);}else{this.featureLayer.events.register("featuresadded",this,function(evt){this.featureLayer.events.unregister("featuresadded",this,arguments.callee);callback.call(scope,evt.features);});}},this,{single:true});}
if(!this.featureStore){this.paging&&this.on("layerchange",function(tool,rec,schema){if(schema){this.un("layerchange",arguments.callee,this);this.setPage();}},this);this.setFeatureStore(filter,!this.paging);}else{this.featureStore.setOgcFilter(filter);if(this.paging){this.setPage();}else{this.featureStore.load();}}}},clearFeatures:function(){var store=this.featureStore;if(store){if(this.fireEvent("beforeclearfeatures",this)!==false){store.removeAll();this.fireEvent("clearfeatures",this);var proxy=store.proxy;proxy.abortRequest();if(proxy.protocol.response){proxy.protocol.response.abort();}}}},getProjection:function(record){var projection=this.target.mapPanel.map.getProjectionObject();var layerProj=record.getLayer().projection;if(layerProj&&layerProj.equals(projection)){projection=layerProj;}
return layerProj;},setFeatureStore:function(filter,autoLoad){var record=this.layerRecord;var source=this.target.getSource(record);if(source&&source instanceof gxp.plugins.WMSSource){source.getSchema(record,function(schema){if(schema===false){this.clearFeatureStore();}else{var fields=[],geometryName;var geomRegex=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;var types={"xsd:boolean":"boolean","xsd:int":"int","xsd:integer":"int","xsd:short":"int","xsd:long":"int","xsd:date":"date","xsd:string":"string","xsd:float":"float","xsd:double":"float"};schema.each(function(r){var match=geomRegex.exec(r.get("type"));if(match){geometryName=r.get("name");this.geometryType=match[1];}else{var type=types[r.get("type")];var field={name:r.get("name"),type:types[type]};if(type=="date"){field.dateFormat="Y-m-d\\Z";}
fields.push(field);}},this);var protocolOptions={srsName:this.getProjection(record).getCode(),url:schema.url,featureType:schema.reader.raw.featureTypes[0].typeName,featureNS:schema.reader.raw.targetNamespace,geometryName:geometryName};this.hitCountProtocol=new OpenLayers.Protocol.WFS(Ext.apply({version:"1.1.0",readOptions:{output:"object"},resultType:"hits",filter:filter},protocolOptions));this.featureStore=new gxp.data.WFSFeatureStore(Ext.apply({fields:fields,proxy:{protocol:{outputFormat:this.format,multi:this.multi}},maxFeatures:this.maxFeatures,layer:this.featureLayer,ogcFilter:filter,autoLoad:autoLoad,autoSave:false,listeners:{"beforewrite":function(store,action,rs,options){this.fireEvent("beforesave",this,store,options.params);},"write":function(store,action,result,res,rs){this.redrawMatchingLayers(record);},"load":function(store,rs,options){this.fireEvent("query",this,store,this.filter);},scope:this}},protocolOptions));}
this.fireEvent("layerchange",this,record,schema);},this);}else{this.clearFeatureStore();this.fireEvent("layerchange",this,record,false);}},redrawMatchingLayers:function(record){var name=record.get("name");var source=record.get("source");this.target.mapPanel.layers.each(function(candidate){if(candidate.get("source")===source&&candidate.get("name")===name){candidate.getLayer().redraw(true);}});},clearFeatureStore:function(){if(this.featureStore){this.featureStore.removeAll();this.featureStore.unbind();this.featureStore.destroy();this.featureStore=null;this.geometryType=null;}},processPage:function(page,condition,callback,scope){condition=condition||{};var index=condition.lonLat?null:condition.index;var next=condition.next;var pages=this.pages;var i=this.pages.indexOf(page);this.setPageFilter(page);var nextOk=next?i==(pages.indexOf(next)||pages.length)-1:true;var lonLatOk=condition.lonLat?page.extent.containsLonLat(condition.lonLat):true;if(lonLatOk&&page.numFeatures&&page.numFeatures<=this.maxFeatures){callback.call(this,page);}else if(lonLatOk&&(i==index||nextOk)){this.hitCountProtocol.read({callback:function(response){var i=index,lonLat=condition.lonLat;if(next){i=(pages.indexOf(next)||pages.length)-1;}
if(!i&&lonLat&&page.extent.containsLonLat(lonLat)){i=pages.indexOf(page);}
page.numFeatures=response.numberOfFeatures;if(this.page){return;}
if(page.numFeatures>this.maxFeatures){this.createLeaf(page,Ext.applyIf({index:i,next:next},condition),callback,scope);}else if(page.numFeatures==0&&pages.length>1){pages.remove(page);condition.allowEmpty===false&&this.setPage({index:index%this.pages.length,allowEmpty:false});}else if(this.pages.indexOf(page)==i){callback.call(this,page);}},scope:this});}},createLeaf:function(page,condition,callback,scope){condition=condition||{};var layer=this.layerRecord.getLayer();var pageIndex=this.pages.indexOf(page);this.pages.remove(page);var extent=page.extent;var center=extent.getCenterLonLat();var l=[extent.left,center.lon,extent.left,center.lon];var b=[center.lat,center.lat,extent.bottom,extent.bottom];var r=[center.lon,extent.right,center.lon,extent.right];var t=[extent.top,extent.top,center.lat,center.lat];var i,leaf;for(i=3;i>=0;--i){leaf={extent:new OpenLayers.Bounds(l[i],b[i],r[i],t[i])};this.pages.splice(pageIndex,0,leaf);this.processPage(leaf,condition,callback,scope);}},getPagingExtent:function(meth){var layer=this.layerRecord.getLayer();var filter=this.getSpatialFilter();var extent=filter?filter.value:this.target.mapPanel.map[meth]();if(extent&&layer.maxExtent){if(extent.containsBounds(layer.maxExtent)){extent=layer.maxExtent;}}
return extent;},getSpatialFilter:function(){var filter;if(this.filter instanceof OpenLayers.Filter.Spatial&&this.filter.type===OpenLayers.Filter.Spatial.BBOX){filter=this.filter;}else if(this.filter instanceof OpenLayers.Filter.Logical&&this.filter.type===OpenLayers.Filter.Logical.AND){for(var f,i=this.filter.filters.length-1;i>=0;--i){f=this.filter.filters[i];if(f instanceof OpenLayers.Filter.Spatial&&f.type===OpenLayers.Filter.Spatial.BBOX){filter=f;break;}}}
return filter;},setPageFilter:function(page){var filter;if(page.extent){var bboxFilter=new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,property:this.featureStore.geometryName,value:page.extent});filter=this.filter?new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[this.filter,bboxFilter]}):bboxFilter;}else{filter=this.filter;}
this.featureStore.setOgcFilter(filter);this.hitCountProtocol.filter=filter;this.hitCountProtocol.options.filter=filter;return filter;},nextPage:function(callback,scope){var index;if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){var page=this.page;this.page=null;index=(this.pages.indexOf(page)+1)%this.pages.length;}else{index=this.pageIndex+1%this.numPages;}
this.setPage({index:index,allowEmpty:false},callback,scope);},previousPage:function(callback,scope){var index;if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){index=this.pages.indexOf(this.page)-1;if(index<0){index=this.pages.length-1;}}else{index=this.pageIndex-1;if(index<0){index=this.numPages-1;}}
this.setPage({index:index,allowEmpty:false,next:this.page},callback);},setPage:function(condition,callback,scope){if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){if(this.filter instanceof OpenLayers.Filter.FeatureId){this.featureStore.load({callback:function(){callback&&callback.call(scope);}});return;}
if(this.fireEvent("beforesetpage",this,condition,callback,scope)!==false){if(!condition){var extent=this.getPagingExtent("getExtent");var lonLat=new OpenLayers.LonLat(extent.left,extent.top);var maxExtent=this.target.mapPanel.map.getMaxExtent();if(!maxExtent.containsLonLat(lonLat,true)){lonLat=new OpenLayers.LonLat(maxExtent.left,maxExtent.top);}
condition={lonLat:lonLat,allowEmpty:false};}
condition.index=condition.index||0;if(condition.index=="last"){condition.index=this.pages.length-1;condition.next=this.pages[0];}
this.page=null;if(!this.pages){var layer=this.layerRecord.getLayer();var queryExtent=this.getPagingExtent("getMaxExtent");this.pages=[{extent:queryExtent}];condition.index=0;}else if(condition.lonLat){for(var i=this.pages.length-1;i>=0;--i){if(this.pages[i].extent.containsLonLat(condition.lonLat)){condition.index=i;break;}}}
this.processPage(this.pages[condition.index],condition,function(page){var map=this.target.mapPanel.map;this.page=page;this.setPageFilter(page);if(this.autoZoomPage&&!map.getExtent().containsLonLat(page.extent.getCenterLonLat())){map.zoomToExtent(page.extent);}
var pageIndex=this.pages.indexOf(this.page);this.fireEvent("setpage",this,condition,callback,scope,pageIndex,this.pages.length);this.featureStore.load({callback:function(){callback&&callback.call(scope,page);}});},this);}}else{if(this.fireEvent("beforesetpage",this,condition,callback,scope)!==false){if(!condition){this.hitCountProtocol.read({filter:this.filter,callback:function(response){this.numberOfFeatures=response.numberOfFeatures;this.numPages=Math.ceil(this.numberOfFeatures/this.maxFeatures);this.pageIndex=0;this.fireEvent("setpage",this,condition,callback,scope,this.pageIndex,this.numPages);this.featureStore.load({output:"object",callback:function(){callback&&callback.call(scope);}});},scope:this});}else{if(condition.index!=null){if(condition.index==="last"){this.pageIndex=this.numPages-1;}else if(condition.index==="first"){this.pageIndex=0;}else{this.pageIndex=condition.index;}
var startIndex=this.pageIndex*this.maxFeatures;this.fireEvent("setpage",this,condition,callback,scope,this.pageIndex,this.numPages);this.featureStore.load({startIndex:startIndex,callback:function(){callback&&callback.call(scope);}});}}}}}});gxp.plugins.FeatureManager.QUADTREE_PAGING=0;gxp.plugins.FeatureManager.WFS_PAGING=1;Ext.preg(gxp.plugins.FeatureManager.prototype.ptype,gxp.plugins.FeatureManager);Ext.namespace("gxp.plugins");gxp.plugins.FeatureToField=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_featuretofield",format:"GeoJSON",addActions:function(){var featureManager=this.target.tools[this.featureManager];var featureInField;var format=new OpenLayers.Format[this.format];featureManager.featureLayer.events.on({"featureselected":function(evt){this.target.field.setValue(format.write(evt.feature));featureInField=evt.feature;},"featureunselected":function(){this.target.field.setValue("");featureInField=null;},scope:this});featureManager.on("layerchange",function(){featureManager.featureStore&&featureManager.featureStore.on("save",function(store,batch,data){if(data.create){var i,feature;for(i=data.create.length-1;i>=0;--i){feature=data.create[i].feature;if(feature==featureInField){this.target.field.setValue(format.write(feature));}}};},this);});return gxp.plugins.FeatureToField.superclass.addActions.apply(this,arguments);}});Ext.preg(gxp.plugins.FeatureToField.prototype.ptype,gxp.plugins.FeatureToField);Ext.namespace("gxp.plugins");gxp.plugins.LayerTree=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_layertree",rootNodeText:"Layers",overlayNodeText:"Overlays",baseNodeText:"Base Layers",groups:null,defaultGroup:"default",constructor:function(config){gxp.plugins.LayerTree.superclass.constructor.apply(this,arguments);if(!this.groups){this.groups={"default":this.overlayNodeText,"background":{title:this.baseNodeText,exclusive:true}};}},addOutput:function(config){var target=this.target,me=this;var addListeners=function(node,record){if(record){target.on("layerselectionchange",function(rec){if(!me.selectionChanging&&rec===record){node.select();}});if(record===target.selectedLayer){node.on("rendernode",function(){node.select();});}}};var LayerNodeUI=Ext.extend(GeoExt.tree.LayerNodeUI,new GeoExt.tree.TreeNodeUIEventMixin());var treeRoot=new Ext.tree.TreeNode({text:this.rootNodeText,expanded:true,isTarget:false,allowDrop:false});var groupConfig,defaultGroup=this.defaultGroup;for(var group in this.groups){groupConfig=typeof this.groups[group]=="string"?{title:this.groups[group]}:this.groups[group];treeRoot.appendChild(new GeoExt.tree.LayerContainer({text:groupConfig.title,iconCls:"gxp-folder",expanded:true,group:group==defaultGroup?undefined:group,loader:new GeoExt.tree.LayerLoader({baseAttrs:groupConfig.exclusive?{checkedGroup:group}:undefined,store:this.target.mapPanel.layers,filter:(function(group){return function(record){return(record.get("group")||defaultGroup)==group&&record.getLayer().displayInLayerSwitcher==true;};})(group),createNode:function(attr){attr.uiProvider=LayerNodeUI;var layer=attr.layer;var store=attr.layerStore;if(layer&&store){var record=store.getAt(store.findBy(function(r){return r.getLayer()===layer;}));if(record){if(!record.get("queryable")){attr.iconCls="gxp-tree-rasterlayer-icon";}
if(record.get("fixed")){attr.allowDrag=false;}}}
var node=GeoExt.tree.LayerLoader.prototype.createNode.apply(this,arguments);addListeners(node,record);return node;}}),singleClickExpand:true,allowDrag:false,listeners:{append:function(tree,node){node.expand();}}}));}
config=Ext.apply({xtype:"treepanel",root:treeRoot,rootVisible:false,border:false,enableDD:true,selModel:new Ext.tree.DefaultSelectionModel({listeners:{beforeselect:function(selModel,node){var changed=true;var layer=node&&node.layer;var record;if(layer){var store=node.layerStore;record=store.getAt(store.findBy(function(r){return r.getLayer()===layer;}));}
this.selectionChanging=true;changed=this.target.selectLayer(record);this.selectionChanging=false;return changed;},scope:this}}),listeners:{contextmenu:function(node,e){if(node&&node.layer){node.select();var tree=node.getOwnerTree();if(tree.getSelectionModel().getSelectedNode()===node){var c=tree.contextMenu;c.contextNode=node;c.items.getCount()>0&&c.showAt(e.getXY());}}},beforemovenode:function(tree,node,oldParent,newParent,i){if(oldParent!==newParent){var store=newParent.loader.store;var index=store.findBy(function(r){return r.getLayer()===node.layer;});var record=store.getAt(index);record.set("group",newParent.attributes.group);}},scope:this},contextMenu:new Ext.menu.Menu({items:[]})},config||{});var layerTree=gxp.plugins.LayerTree.superclass.addOutput.call(this,config);return layerTree;}});Ext.preg(gxp.plugins.LayerTree.prototype.ptype,gxp.plugins.LayerTree);Ext.namespace("gxp.plugins");gxp.plugins.SelectedFeatureActions=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_selectedfeatureactions",addActions:function(){var featureManager=this.target.tools[this.featureManager];var len=this.actions.length,actions=new Array(len);var tool=this;for(var i=0;i<len;++i){actions[i]=Ext.apply({iconCls:"process",disabled:true,handler:function(){var feature=featureManager.featureLayer.selectedFeatures[0];var tpl=new Ext.Template(this.urlTemplate);var outputConfig=Ext.applyIf(this.outputConfig||{},tool.initialConfig.outputConfig);tool.outputConfig=Ext.apply(outputConfig,{title:this.menuText,bodyCfg:{tag:"iframe",src:tpl.apply(Ext.applyIf({fid:feature.fid.split(".").pop(),layer:featureManager.layerRecord.get("name")},feature.attributes)),style:{border:"0px none"}}});tool.addOutput();}},this.actions[i]);}
featureManager.featureLayer.events.on({"featureselected":function(evt){var disabled=evt.feature.layer.selectedFeatures.length!=1;for(var i=actions.length-1;i>=0;--i){actions[i].setDisabled(disabled);}},"featureunselected":function(evt){if(evt.feature.layer.selectedFeatures.length==0){for(var i=actions.length-1;i>=0;--i){actions[i].disable();}}},scope:this});gxp.plugins.SelectedFeatureActions.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.SelectedFeatureActions.prototype.ptype,gxp.plugins.SelectedFeatureActions);Ext.namespace("gxp.plugins");gxp.plugins.LayerSource=Ext.extend(Ext.util.Observable,{store:null,title:"",constructor:function(config){this.initialConfig=config;Ext.apply(this,config);this.addEvents("ready","failure");gxp.plugins.LayerSource.superclass.constructor.apply(this,arguments);},init:function(target){this.target=target;this.createStore();},getMapProjection:function(){var projConfig=this.target.mapPanel.map.projection;return this.target.mapPanel.map.getProjectionObject()||(projConfig&&new OpenLayers.Projection(projConfig))||new OpenLayers.Projection("EPSG:4326");},getProjection:function(layerRecord){var layer=layerRecord.getLayer();var mapProj=this.getMapProjection();var proj=layer.projection?layer.projection instanceof OpenLayers.Projection?layer.projection:new OpenLayers.Projection(layer.projection):mapProj;return proj.equals(mapProj)?mapProj:null;},createStore:function(){this.fireEvent("ready",this);},createLayerRecord:function(config){},getConfigForRecord:function(record){var layer=record.getLayer();return{source:record.get("source"),name:record.get("name"),title:record.get("title"),visibility:layer.getVisibility(),opacity:layer.opacity||undefined,group:record.get("group"),fixed:record.get("fixed"),selected:record.get("selected")};}});Ext.namespace("gxp.plugins");gxp.plugins.GoogleSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_googlesource",timeout:7000,title:"Google Layers",roadmapAbstract:"Show street map",satelliteAbstract:"Show satellite imagery",hybridAbstract:"Show imagery with street names",terrainAbstract:"Show street map with terrain",constructor:function(config){this.config=config;gxp.plugins.GoogleSource.superclass.constructor.apply(this,arguments);},createStore:function(){gxp.plugins.GoogleSource.loader.onLoad({timeout:this.timeout,callback:this.syncCreateStore,errback:function(){delete this.store;this.fireEvent("failure",this,"The Google Maps script failed to load within the provided timeout ("+(this.timeout/1000)+" s).");},scope:this});},syncCreateStore:function(){var mapTypes={"ROADMAP":{"abstract":this.roadmapAbstract,MAX_ZOOM_LEVEL:20},"SATELLITE":{"abstract":this.satelliteAbstract},"HYBRID":{"abstract":this.hybridAbstract},"TERRAIN":{"abstract":this.terrainAbstract,MAX_ZOOM_LEVEL:15}};var layers=[];var name,mapType;for(name in mapTypes){mapType=google.maps.MapTypeId[name];layers.push(new OpenLayers.Layer.Google("Google "+mapType.replace(/\w/,function(c){return c.toUpperCase();}),{type:mapType,typeName:name,MAX_ZOOM_LEVEL:mapTypes[name].MAX_ZOOM_LEVEL,maxExtent:new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),restrictedExtent:new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),projection:this.projection}));}
this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"typeName"},{name:"abstract",type:"string"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("abstract",mapTypes[l.get("name")]["abstract"]);});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var cmp=function(l){return l.get("name")===config.name;};if(this.target.mapPanel.layers.findBy(cmp)==-1){record=this.store.getAt(this.store.findBy(cmp)).clone();var layer=record.getLayer();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.commit();}
return record;}});gxp.plugins.GoogleSource.loader=new(Ext.extend(Ext.util.Observable,{ready:!!(window.google&&google.maps),loading:false,constructor:function(){this.addEvents("ready","failure");return Ext.util.Observable.prototype.constructor.apply(this,arguments);},onScriptLoad:function(){var monitor=gxp.plugins.GoogleSource.loader;if(!monitor.ready){monitor.ready=true;monitor.loading=false;monitor.fireEvent("ready");}},onLoad:function(options){if(this.ready){window.setTimeout(function(){options.callback.call(options.scope);},0);}else if(!this.loading){this.loadScript(options);}else{this.on({ready:options.callback,failure:options.errback||Ext.emptyFn,scope:options.scope});}},loadScript:function(options){var params={autoload:Ext.encode({modules:[{name:"maps",version:3.3,nocss:"true",callback:"gxp.plugins.GoogleSource.loader.onScriptLoad",other_params:"sensor=false"}]})};var script=document.createElement("script");script.src="http://www.google.com/jsapi?"+Ext.urlEncode(params);var errback=options.errback||Ext.emptyFn;var timeout=options.timeout||gxp.plugins.GoogleSource.prototype.timeout;window.setTimeout((function(){if(!gxp.plugins.GoogleSource.loader.ready){this.loading=false;this.ready=false;document.getElementsByTagName("head")[0].removeChild(script);errback.call(options.scope);this.fireEvent("failure");this.purgeListeners();}}).createDelegate(this),timeout);this.on({ready:options.callback,scope:options.scope});this.loading=true;document.getElementsByTagName("head")[0].appendChild(script);}}))();Ext.preg(gxp.plugins.GoogleSource.prototype.ptype,gxp.plugins.GoogleSource);Ext.namespace("gxp.plugins");gxp.plugins.OLSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_olsource",createLayerRecord:function(config){var record;var Class=window;var parts=config.type.split(".");for(var i=0,ii=parts.length;i<ii;++i){Class=Class[parts[i]];if(!Class){break;}}
if(Class&&Class.prototype&&Class.prototype.initialize){var Constructor=function(){Class.prototype.initialize.apply(this,config.args);};Constructor.prototype=Class.prototype;var layer=new Constructor();if("visibility"in config){layer.visibility=config.visibility;}
var Record=GeoExt.data.LayerRecord.create([{name:"name",type:"string"},{name:"source",type:"string"},{name:"group",type:"string"},{name:"fixed",type:"boolean"},{name:"selected",type:"boolean"},{name:"type",type:"string"},{name:"args"}]);var data={layer:layer,title:layer.name,name:config.name||layer.name,source:config.source,group:config.group,fixed:("fixed"in config)?config.fixed:false,selected:("selected"in config)?config.selected:false,type:config.type,args:config.args,properties:("properties"in config)?config.properties:undefined};record=new Record(data,layer.id);}else{throw new Error("Cannot construct OpenLayers layer from given type: "+config.type);}
return record;},getConfigForRecord:function(record){var config=gxp.plugins.OLSource.superclass.getConfigForRecord.apply(this,arguments);var layer=record.getLayer();return Ext.apply(config,{type:record.get("type"),args:record.get("args")});}});Ext.preg(gxp.plugins.OLSource.prototype.ptype,gxp.plugins.OLSource);Ext.namespace("gxp.plugins");gxp.plugins.OSMSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_osmsource",title:"OpenStreetMap Layers",mapnikAttribution:"Data CC-By-SA by <a href='http://openstreetmap.org/' target='_blank'>OpenStreetMap</a>",osmarenderAttribution:"Data CC-By-SA by <a href='http://openstreetmap.org/' target='_blank'>OpenStreetMap</a>",createStore:function(){var options={projection:"EPSG:900913",maxExtent:new OpenLayers.Bounds(-128*156543.0339,-128*156543.0339,128*156543.0339,128*156543.0339),maxResolution:156543.03390625,numZoomLevels:19,units:"m",buffer:1};var layers=[new OpenLayers.Layer.OSM("OpenStreetMap",["http://a.tile.openstreetmap.org/${z}/${x}/${y}.png","http://b.tile.openstreetmap.org/${z}/${x}/${y}.png","http://c.tile.openstreetmap.org/${z}/${x}/${y}.png"],OpenLayers.Util.applyDefaults({attribution:this.mapnikAttribution,type:"mapnik"},options)),new OpenLayers.Layer.OSM("Tiles@home",["http://a.tah.openstreetmap.org/Tiles/tile/${z}/${x}/${y}.png","http://b.tah.openstreetmap.org/Tiles/tile/${z}/${x}/${y}.png","http://c.tah.openstreetmap.org/Tiles/tile/${z}/${x}/${y}.png"],OpenLayers.Util.applyDefaults({attribution:this.osmarenderAttribution,type:"osmarender"},options))];this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"type"},{name:"abstract",type:"string",mapping:"attribution"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("group","background");});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var index=this.store.findExact("name",config.name);if(index>-1){record=this.store.getAt(index).copy(Ext.data.Record.id({}));var layer=record.getLayer().clone();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.data.layer=layer;record.commit();}
return record;}});Ext.preg(gxp.plugins.OSMSource.prototype.ptype,gxp.plugins.OSMSource);(function(){function keepRaw(data){var format=this.meta.format;if(typeof data==="string"||data.nodeType){data=format.read(data);var origRead=format.read;format.read=function(){format.read=origRead;return data;};}
this.raw=data;};Ext.intercept(GeoExt.data.WMSCapabilitiesReader.prototype,"readRecords",keepRaw);GeoExt.data.AttributeReader&&Ext.intercept(GeoExt.data.AttributeReader.prototype,"readRecords",keepRaw);})();Ext.namespace("gxp.plugins");gxp.plugins.WMSSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_wmssource",baseParams:null,format:null,describeLayerStore:null,describedLayers:null,schemaCache:null,ready:false,isLazy:function(){var lazy=false;var mapConfig=this.target.initialConfig.map;if(mapConfig&&mapConfig.layers){var layerConfig;for(var i=0,ii=mapConfig.layers.length;i<ii;++i){layerConfig=mapConfig.layers[i];if(layerConfig.source===this.id){lazy=this.layerConfigComplete(layerConfig);if(lazy===false){break;}}}}
return lazy;},layerConfigComplete:function(config){return this.forceLazy===true;},createStore:function(){var baseParams=this.baseParams||{SERVICE:"WMS",REQUEST:"GetCapabilities"};if(this.version){baseParams.VERSION=this.version;}
var lazy=this.isLazy();this.store=new GeoExt.data.WMSCapabilitiesStore({url:this.trimUrl(this.url,baseParams),baseParams:baseParams,format:this.format,autoLoad:!lazy,layerParams:{exceptions:null},listeners:{load:function(){if(!this.store.reader.raw||!this.store.reader.raw.service){this.fireEvent("failure",this,"Invalid capabilities document.");}else{if(!this.title){this.title=this.store.reader.raw.service.title;}
if(!this.ready){this.ready=true;this.fireEvent("ready",this);}}},exception:function(proxy,type,action,options,response,error){delete this.store;var msg,details="";if(type==="response"){if(typeof error=="string"){msg=error;}else{msg="Invalid response from server.";var status=response.status;if(status>=200&&status<300){var report=error&&error.arg&&error.arg.exceptionReport;details=gxp.util.getOGCExceptionText(report);}else{details="Status: "+status;}}}else{msg="Trouble creating layer store from response.";details="Unable to handle response.";}
this.fireEvent("failure",this,msg,details);},scope:this}});if(lazy){window.setTimeout((function(){this.fireEvent("ready",this);}).createDelegate(this),0);}},trimUrl:function(url,params,respectCase){var urlParams=OpenLayers.Util.getParameters(url);params=OpenLayers.Util.upperCaseObject(params);var keys=0;for(var key in urlParams){++keys;if(key.toUpperCase()in params){--keys;delete urlParams[key];}}
return url.split("?").shift()+(keys?"?"+OpenLayers.Util.getParameterString(urlParams):"");},createLazyLayerRecord:function(config){var record=new this.store.recordType(config);record.setLayer(new OpenLayers.Layer.WMS(config.title||config.name,this.url,{layers:config.name}));if(!config.srs){record.set("srs",this.target.map.projection);}
if(!config.bbox){var bbox={};bbox[record.get("srs")]={bbox:this.target.map.maxExtent};record.set("bbox",bbox);}
return record;},createLayerRecord:function(config){var record,original;var index=this.store.findExact("name",config.name);if(index>-1){original=this.store.getAt(index);}else if(this.layerConfigComplete(config)){original=this.createLazyLayerRecord(config);}
if(original){var layer=original.getLayer();var projection=this.getMapProjection();var layerProjection=this.getProjection(original);var projCode=projection.getCode();var nativeExtent=original.get("bbox")[projCode];var swapAxis=layer.params.VERSION>="1.3"&&!!layer.yx[projCode];var maxExtent=(nativeExtent&&OpenLayers.Bounds.fromArray(nativeExtent.bbox,swapAxis))||OpenLayers.Bounds.fromArray(original.get("llbbox")).transform(new OpenLayers.Projection("EPSG:4326"),projection);if(!(1/maxExtent.getHeight()>0)||!(1/maxExtent.getWidth()>0)){maxExtent=undefined;}
var params=Ext.applyIf({STYLES:config.styles,FORMAT:config.format,TRANSPARENT:config.transparent},layer.params);var singleTile=false;if("tiled"in config){singleTile=!config.tiled;}else{if(original.data.dimensions&&original.data.dimensions.time){singleTile=true;}}
layer=new OpenLayers.Layer.WMS(config.title||layer.name,layer.url,params,{attribution:layer.attribution,maxExtent:maxExtent,restrictedExtent:maxExtent,singleTile:singleTile,ratio:config.ratio||1,visibility:("visibility"in config)?config.visibility:true,opacity:("opacity"in config)?config.opacity:1,buffer:("buffer"in config)?config.buffer:1,projection:layerProjection,dimensions:original.data.dimensions});var data=Ext.applyIf({title:layer.name,group:config.group,infoFormat:config.infoFormat,source:config.source,properties:"gxp_wmslayerpanel",fixed:config.fixed,selected:"selected"in config?config.selected:false,restUrl:this.restUrl,layer:layer},original.data);var fields=[{name:"source",type:"string"},{name:"group",type:"string"},{name:"properties",type:"string"},{name:"fixed",type:"boolean"},{name:"selected",type:"boolean"},{name:"restUrl",type:"string"},{name:"infoFormat",type:"string"}];original.fields.each(function(field){fields.push(field);});var Record=GeoExt.data.LayerRecord.create(fields);record=new Record(data,layer.id);}
return record;},getProjection:function(layerRecord){var projection=this.getMapProjection();var compatibleProjection=projection;var availableSRS=layerRecord.get("srs");if(!availableSRS[projection.getCode()]){compatibleProjection=null;var p,srs;for(srs in availableSRS){if((p=new OpenLayers.Projection(srs)).equals(projection)){compatibleProjection=p;break;}}}
return compatibleProjection;},initDescribeLayerStore:function(){var req=this.store.reader.raw.capability.request.describelayer;if(req){var version=this.store.reader.raw.version;if(parseFloat(version)>1.1){version="1.1.1";}
this.describeLayerStore=new GeoExt.data.WMSDescribeLayerStore({url:req.href,baseParams:{VERSION:version,REQUEST:"DescribeLayer"}});}},describeLayer:function(rec,callback,scope){if(!this.describeLayerStore){this.initDescribeLayerStore();}
function delayedCallback(arg){window.setTimeout(function(){callback.call(scope,arg);},0);}
if(!this.describeLayerStore){delayedCallback(false);return;}
if(!this.describedLayers){this.describedLayers={};}
var layerName=rec.getLayer().params.LAYERS;var cb=function(){var recs=Ext.isArray(arguments[1])?arguments[1]:arguments[0];var rec,name;for(var i=recs.length-1;i>=0;i--){rec=recs[i];name=rec.get("layerName");if(name==layerName){this.describeLayerStore.un("load",arguments.callee,this);this.describedLayers[name]=true;callback.call(scope,rec);return;}else if(typeof this.describedLayers[name]=="function"){var fn=this.describedLayers[name];this.describeLayerStore.un("load",fn,this);fn.apply(this,arguments);}}
delete describedLayers[layerName];callback.call(scope,false);};var describedLayers=this.describedLayers;var index;if(!describedLayers[layerName]){describedLayers[layerName]=cb;this.describeLayerStore.load({params:{LAYERS:layerName},add:true,callback:cb,scope:this});}else if((index=this.describeLayerStore.findExact("layerName",layerName))==-1){this.describeLayerStore.on("load",cb,this);}else{delayedCallback(this.describeLayerStore.getAt(index));}},getSchema:function(rec,callback,scope){if(!this.schemaCache){this.schemaCache={};}
this.describeLayer(rec,function(r){if(r&&r.get("owsType")=="WFS"){var typeName=r.get("typeName");var schema=this.schemaCache[typeName];if(schema){if(schema.getCount()==0){schema.on("load",function(){callback.call(scope,schema);},this,{single:true});}else{callback.call(scope,schema);}}else{schema=new GeoExt.data.AttributeStore({url:r.get("owsURL"),baseParams:{SERVICE:"WFS",VERSION:"1.1.0",REQUEST:"DescribeFeatureType",TYPENAME:typeName},autoLoad:true,listeners:{"load":function(){callback.call(scope,schema);},scope:this}});this.schemaCache[typeName]=schema;}}else{callback.call(scope,false);}},this);},getWFSProtocol:function(record,callback,scope){this.getSchema(record,function(schema){var protocol=false;if(schema){var geometryName;var geomRegex=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;schema.each(function(r){var match=geomRegex.exec(r.get("type"));if(match){geometryName=r.get("name");}},this);protocol=new OpenLayers.Protocol.WFS({version:"1.1.0",srsName:record.getLayer().projection.getCode(),url:schema.url,featureType:schema.reader.raw.featureTypes[0].typeName,featureNS:schema.reader.raw.targetNamespace,geometryName:geometryName});}
callback.call(scope,protocol,schema,record);},this);},getConfigForRecord:function(record){var config=gxp.plugins.WMSSource.superclass.getConfigForRecord.apply(this,arguments);var layer=record.getLayer();var params=layer.params;return Ext.apply(config,{format:params.FORMAT,styles:params.STYLES,transparent:params.TRANSPARENT});}});Ext.preg(gxp.plugins.WMSSource.prototype.ptype,gxp.plugins.WMSSource);Ext.namespace("gxp.plugins");gxp.plugins.WMSCSource=Ext.extend(gxp.plugins.WMSSource,{ptype:"gxp_wmscsource",version:"1.1.1",constructor:function(config){config.baseParams={SERVICE:"WMS",REQUEST:"GetCapabilities",TILED:true};gxp.plugins.WMSCSource.superclass.constructor.apply(this,arguments);this.format=new OpenLayers.Format.WMSCapabilities({profile:'WMSC'});},createLayerRecord:function(config){var record=gxp.plugins.WMSCSource.superclass.createLayerRecord.apply(this,arguments);if(!record){return;}
var caps;if(this.store.reader.raw){caps=this.store.reader.raw.capability;}
var tileSets=(caps&&caps.vendorSpecific&&caps.vendorSpecific)?caps.vendorSpecific.tileSets:null;var layer=record.get("layer");if(tileSets!==null){var mapProjection=this.getMapProjection();for(var i=0,len=tileSets.length;i<len;i++){var tileSet=tileSets[i];if(tileSet.layers===layer.params.LAYERS){var tileProjection;for(var srs in tileSet.srs){tileProjection=new OpenLayers.Projection(srs);break;}
if(mapProjection.equals(tileProjection)){var bbox=tileSet.bbox[srs].bbox;layer.projection=tileProjection;layer.addOptions({resolutions:tileSet.resolutions,tileSize:new OpenLayers.Size(tileSet.width,tileSet.height),tileOrigin:new OpenLayers.LonLat(bbox[0],bbox[1])});layer.params.TILED=(config.cached!==false)&&true;break;}}}}else if(this.forceLazy===true&&config.cached===true){layer.params.TILED=true;}
return record;},getConfigForRecord:function(record){var config=gxp.plugins.WMSCSource.superclass.getConfigForRecord.apply(this,arguments);return Ext.apply(config,{cached:!!record.getLayer().params.TILED});}});Ext.preg(gxp.plugins.WMSCSource.prototype.ptype,gxp.plugins.WMSCSource);Ext.namespace("gxp.plugins");gxp.plugins.WMSGetFeatureInfo=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_wmsgetfeatureinfo",outputTarget:"map",popupCache:null,infoActionTip:"Get Feature Info",popupTitle:"Feature Info",format:"html",addActions:function(){this.popupCache={};var actions=gxp.plugins.WMSGetFeatureInfo.superclass.addActions.call(this,[{tooltip:this.infoActionTip,iconCls:"gxp-icon-getfeatureinfo",toggleGroup:this.toggleGroup,enableToggle:true,allowDepress:true,toggleHandler:function(button,pressed){for(var i=0,len=info.controls.length;i<len;i++){if(pressed){info.controls[i].activate();}else{info.controls[i].deactivate();}}}}]);var infoButton=this.actions[0].items[0];var info={controls:[]};var updateInfo=function(){var queryableLayers=this.target.mapPanel.layers.queryBy(function(x){return x.get("queryable");});var map=this.target.mapPanel.map;var control;for(var i=0,len=info.controls.length;i<len;i++){control=info.controls[i];control.deactivate();control.destroy();}
info.controls=[];queryableLayers.each(function(x){var layer=x.getLayer();var vendorParams=Ext.apply({},this.vendorParams),param;if(this.layerParams){for(var i=this.layerParams.length-1;i>=0;--i){param=this.layerParams[i].toUpperCase();vendorParams[param]=layer.params[param];}}
var infoFormat=x.get("infoFormat");if(infoFormat===undefined){infoFormat=this.format=="html"?"text/html":"application/vnd.ogc.gml";}
var control=new OpenLayers.Control.WMSGetFeatureInfo(Ext.applyIf({url:layer.url,queryVisible:true,layers:[layer],infoFormat:infoFormat,vendorParams:vendorParams,eventListeners:{getfeatureinfo:function(evt){var title=x.get("title")||x.get("name");if(infoFormat=="text/html"){var match=evt.text.match(/<body[^>]*>([\s\S]*)<\/body>/);if(match&&!match[1].match(/^\s*$/)){this.displayPopup(evt,title,match[1]);}}else if(infoFormat=="text/plain"){this.displayPopup(evt,title,'<pre>'+evt.text+'</pre>');}else{this.displayPopup(evt,title);}},scope:this}},this.controlOptions));map.addControl(control);info.controls.push(control);if(infoButton.pressed){control.activate();}},this);};this.target.mapPanel.layers.on("update",updateInfo,this);this.target.mapPanel.layers.on("add",updateInfo,this);this.target.mapPanel.layers.on("remove",updateInfo,this);return actions;},displayPopup:function(evt,title,text){var popup;var popupKey=evt.xy.x+"."+evt.xy.y;if(!(popupKey in this.popupCache)){popup=this.addOutput({xtype:"gx_popup",title:this.popupTitle,layout:"accordion",location:evt.xy,map:this.target.mapPanel,width:250,height:300,defaults:{title:title,layout:"fit",autoScroll:true,autoWidth:true,collapsible:true},listeners:{close:(function(key){return function(panel){delete this.popupCache[key];};})(popupKey),scope:this}});this.popupCache[popupKey]=popup;}else{popup=this.popupCache[popupKey];}
var features=evt.features,config=[];if(!text&&features){var feature;for(var i=0,ii=features.length;i<ii;++i){feature=features[i];config.push(Ext.apply({xtype:"propertygrid",title:feature.fid?feature.fid:title,source:feature.attributes},this.itemConfig));}}else if(text){config.push(Ext.apply({html:text},this.itemConfig));}
popup.add(config);popup.doLayout();}});Ext.preg(gxp.plugins.WMSGetFeatureInfo.prototype.ptype,gxp.plugins.WMSGetFeatureInfo);Ext.namespace("gxp.plugins");gxp.plugins.ZoomToExtent=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_zoomtoextent",menuText:"Zoom To Max Extent",tooltip:"Zoom To Max Extent",extent:null,closest:true,iconCls:"gxp-icon-zoomtoextent",closest:true,constructor:function(config){gxp.plugins.ZoomToExtent.superclass.constructor.apply(this,arguments);if(this.extent instanceof Array){this.extent=OpenLayers.Bounds.fromArray(this.extent);}},addActions:function(){return gxp.plugins.ZoomToExtent.superclass.addActions.apply(this,[{text:this.buttonText,menuText:this.menuText,iconCls:this.iconCls,tooltip:this.tooltip,handler:function(){var map=this.target.mapPanel.map;var extent=typeof this.extent=="function"?this.extent():this.extent;if(!extent){var layer,extended;for(var i=0,len=map.layers.length;i<len;++i){layer=map.layers[i];if(layer.getVisibility()){extended=layer.restrictedExtent||layer.maxExtent;if(extent){extent.extend(extended);}else if(extended){extent=extended.clone();}}}}
if(extent){var restricted=map.restrictedExtent||map.maxExtent;if(restricted){extent=new OpenLayers.Bounds(Math.max(extent.left,restricted.left),Math.max(extent.bottom,restricted.bottom),Math.min(extent.right,restricted.right),Math.min(extent.top,restricted.top));}
map.zoomToExtent(extent,this.closest);}},scope:this}]);}});Ext.preg(gxp.plugins.ZoomToExtent.prototype.ptype,gxp.plugins.ZoomToExtent);Ext.namespace("gxp.plugins");gxp.plugins.NavigationHistory=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_navigationhistory",previousMenuText:"Zoom To Previous Extent",nextMenuText:"Zoom To Next Extent",previousTooltip:"Zoom To Previous Extent",nextTooltip:"Zoom To Next Extent",constructor:function(config){gxp.plugins.NavigationHistory.superclass.constructor.apply(this,arguments);},addActions:function(){var historyControl=new OpenLayers.Control.NavigationHistory();this.target.mapPanel.map.addControl(historyControl);var actions=[new GeoExt.Action({menuText:this.previousMenuText,iconCls:"gxp-icon-zoom-previous",tooltip:this.previousTooltip,disabled:true,control:historyControl.previous}),new GeoExt.Action({menuText:this.nextMenuText,iconCls:"gxp-icon-zoom-next",tooltip:this.nextTooltip,disabled:true,control:historyControl.next})];return gxp.plugins.NavigationHistory.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.NavigationHistory.prototype.ptype,gxp.plugins.NavigationHistory);Ext.namespace("gxp.plugins");gxp.plugins.Zoom=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_zoom",zoomInMenuText:"Zoom In",zoomOutMenuText:"Zoom Out",zoomInTooltip:"Zoom In",zoomOutTooltip:"Zoom Out",constructor:function(config){gxp.plugins.Zoom.superclass.constructor.apply(this,arguments);},addActions:function(){var actions=[{menuText:this.zoomInMenuText,iconCls:"gxp-icon-zoom-in",tooltip:this.zoomInTooltip,handler:function(){this.target.mapPanel.map.zoomIn();},scope:this},{menuText:this.zoomOutMenuText,iconCls:"gxp-icon-zoom-out",tooltip:this.zoomOutTooltip,handler:function(){this.target.mapPanel.map.zoomOut();},scope:this}];return gxp.plugins.Zoom.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.Zoom.prototype.ptype,gxp.plugins.Zoom);Ext.namespace("gxp.plugins");gxp.plugins.SnappingAgent=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_snappingagent",init:function(target){gxp.plugins.SnappingAgent.superclass.init.apply(this,arguments);this.snappingTargets=[];this.controls={};this.setSnappingTargets(this.targets);},setSnappingTargets:function(targets){this.clearSnappingTargets();if(targets){for(var i=0,ii=targets.length;i<ii;++i){this.addSnappingTarget(targets[i]);}}},clearSnappingTargets:function(){var target;for(var i=0,ii=this.snappingTargets.length;i<ii;++i){target=this.snappingTargets[i];if(target.layer){target.layer.destroy();}}
this.snappingTargets.length=0;},addSnappingTarget:function(snapTarget){snapTarget=Ext.apply({},snapTarget);var map=this.target.mapPanel.map;var layer=new OpenLayers.Layer.Vector(snapTarget.name,{strategies:[new OpenLayers.Strategy.BBOX({ratio:1.5,autoActivate:false})],displayInLayerSwitcher:false,visibility:false,minResolution:snapTarget.minResolution,maxResolution:snapTarget.maxResolution});snapTarget.layer=layer;this.snappingTargets.push(snapTarget);var featureManager=new gxp.plugins.FeatureManager({maxFeatures:null,paging:false,layer:{source:snapTarget.source,name:snapTarget.name},listeners:{layerchange:function(){layer.protocol=featureManager.featureStore.proxy.protocol;map.addLayer(layer);map.events.on({moveend:function(){this.updateSnappingTarget(snapTarget);},scope:this});this.updateSnappingTarget(snapTarget);this.target.on({featureedit:function(featureManager,layerCfg){if(layerCfg.name==snapTarget.name&&layerCfg.source==snapTarget.source){this.updateSnappingTarget(snapTarget,{force:true});}},scope:this});},scope:this}});featureManager.init(this.target);},updateSnappingTarget:function(snapTarget,options){var min=snapTarget.minResolution||Number.NEGATIVE_INFINITY;var max=snapTarget.maxResolution||Number.POSITIVE_INFINITY;var resolution=this.target.mapPanel.map.getResolution();if(min<=resolution&&resolution<max){snapTarget.layer.strategies[0].update(options);}},createSnappingControl:function(layer){var options=this.initialConfig.controlOptions||this.initialConfig.options;var control=new OpenLayers.Control.Snapping(Ext.applyIf({layer:layer},options||{}));return control;},registerEditor:function(editor){var featureManager=editor.getFeatureManager();var control=this.createSnappingControl(featureManager.featureLayer);this.controls[editor.id]=control;editor.on({layereditable:this.onLayerEditable,featureeditable:this.onFeatureEditable,scope:this});},onLayerEditable:function(editor,record,editable){var control=this.controls[editor.id];if(!editable){control.deactivate();}else{var targets=[];var snappingTarget,layerConfig,include;var source=record.get("source");var name=record.get("name");for(var i=0,ii=this.snappingTargets.length;i<ii;++i){snappingTarget=this.snappingTargets[i];if(snappingTarget.restrictedLayers){include=false;for(var j=0,jj=snappingTarget.restrictedLayers.length;j<jj;++j){layerConfig=snappingTarget.restrictedLayers[j];if(layerConfig.source===source&&layerConfig.name===name){include=true;break;}}
if(include){targets.push(snappingTarget);}}else{targets.push(snappingTarget);}}
control.setTargets(targets);control.activate();}},onFeatureEditable:function(editor,feature,editable){var manager=editor.getFeatureManager();var editableLayer=manager.layerRecord;var source=editableLayer.get("source");var name=editableLayer.get("name");var target,originalFilter,filter;for(var i=0,ii=this.snappingTargets.length;i<ii;++i){target=this.snappingTargets[i];if(source===target.source&&name===target.name){originalFilter=this.targets[i].filter;if(!feature||!feature.fid||!editable){target.filter=originalFilter;}else{filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.NOT,filters:[new OpenLayers.Filter.FeatureId({fids:[feature.fid]})]});if(originalFilter){target.filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[originalFilter,filter]})}else{target.filter=filter;}}}}}});Ext.preg(gxp.plugins.SnappingAgent.prototype.ptype,gxp.plugins.SnappingAgent);Ext.namespace("gxp.plugins");gxp.plugins.Legend=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_legend",menuText:"Legend",tooltip:"Show Legend",actionTarget:null,constructor:function(config){gxp.plugins.Legend.superclass.constructor.apply(this,arguments);if(!this.outputConfig){this.outputConfig={width:300,height:400};}
Ext.applyIf(this.outputConfig,{title:this.menuText});},addActions:function(){var actions=[{menuText:this.menuText,iconCls:"gxp-icon-legend",tooltip:this.tooltip,handler:function(){this.addOutput();},scope:this}];return gxp.plugins.Legend.superclass.addActions.apply(this,[actions]);},getLegendPanel:function(){return this.output[0];},addOutput:function(config){return gxp.plugins.Legend.superclass.addOutput.call(this,Ext.apply({xtype:'gx_legendpanel',ascending:false,border:false,hideMode:"offsets",layerStore:this.target.mapPanel.layers,defaults:{cls:'gxp-legend-item'}},config));}});Ext.preg(gxp.plugins.Legend.prototype.ptype,gxp.plugins.Legend);Ext.namespace("gxp.plugins");gxp.plugins.Measure=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_measure",outputTarget:"map",lengthMenuText:"Length",areaMenuText:"Area",lengthTooltip:"Measure length",areaTooltip:"Measure area",measureTooltip:"Measure",constructor:function(config){gxp.plugins.Measure.superclass.constructor.apply(this,arguments);},destroy:function(){this.button=null;gxp.plugins.Measure.superclass.destroy.apply(this,arguments);},createMeasureControl:function(handlerType,title){var styleMap=new OpenLayers.StyleMap({"default":new OpenLayers.Style(null,{rules:[new OpenLayers.Rule({symbolizer:{"Point":{pointRadius:4,graphicName:"square",fillColor:"white",fillOpacity:1,strokeWidth:1,strokeOpacity:1,strokeColor:"#333333"},"Line":{strokeWidth:3,strokeOpacity:1,strokeColor:"#666666",strokeDashstyle:"dash"},"Polygon":{strokeWidth:2,strokeOpacity:1,strokeColor:"#666666",fillColor:"white",fillOpacity:0.3}}})]})});var cleanup=function(){if(measureToolTip){measureToolTip.destroy();}};var makeString=function(metricData){var metric=metricData.measure;var metricUnit=metricData.units;measureControl.displaySystem="english";var englishData=metricData.geometry.CLASS_NAME.indexOf("LineString")>-1?measureControl.getBestLength(metricData.geometry):measureControl.getBestArea(metricData.geometry);var english=englishData[0];var englishUnit=englishData[1];measureControl.displaySystem="metric";var dim=metricData.order==2?'<sup>2</sup>':'';return metric.toFixed(2)+" "+metricUnit+dim+"<br>"+
english.toFixed(2)+" "+englishUnit+dim;};var measureToolTip;var controlOptions=Ext.apply({},this.initialConfig.controlOptions);Ext.applyIf(controlOptions,{geodesic:true,persist:true,handlerOptions:{layerOptions:{styleMap:styleMap}},eventListeners:{measurepartial:function(event){cleanup();measureToolTip=this.addOutput({xtype:'tooltip',html:makeString(event),title:title,autoHide:false,closable:true,draggable:false,mouseOffset:[0,0],showDelay:1,listeners:{hide:cleanup}});if(event.measure>0){var px=measureControl.handler.lastUp;var p0=this.target.mapPanel.getPosition();measureToolTip.targetXY=[p0[0]+px.x,p0[1]+px.y];measureToolTip.show();}},measure:function(event){cleanup();measureToolTip=this.addOutput({xtype:'tooltip',target:Ext.getBody(),html:makeString(event),title:title,autoHide:false,closable:true,draggable:false,mouseOffset:[0,0],showDelay:1,listeners:{hide:function(){measureControl.cancel();cleanup();}}});},deactivate:cleanup,scope:this}});var measureControl=new OpenLayers.Control.Measure(handlerType,controlOptions);return measureControl;},addActions:function(){this.activeIndex=0;this.button=new Ext.SplitButton({iconCls:"gxp-icon-measure-length",tooltip:this.measureTooltip,enableToggle:true,toggleGroup:this.toggleGroup,allowDepress:true,handler:function(button,event){if(button.pressed){button.menu.items.itemAt(this.activeIndex).setChecked(true);}},scope:this,listeners:{toggle:function(button,pressed){if(!pressed){button.menu.items.each(function(i){i.setChecked(false);});}},render:function(button){Ext.ButtonToggleMgr.register(button);}},menu:new Ext.menu.Menu({items:[new Ext.menu.CheckItem(new GeoExt.Action({text:this.lengthMenuText,iconCls:"gxp-icon-measure-length",toggleGroup:this.toggleGroup,group:this.toggleGroup,listeners:{checkchange:function(item,checked){this.activeIndex=0;this.button.toggle(checked);if(checked){this.button.setIconClass(item.iconCls);}},scope:this},map:this.target.mapPanel.map,control:this.createMeasureControl(OpenLayers.Handler.Path,this.lengthTooltip)})),new Ext.menu.CheckItem(new GeoExt.Action({text:this.areaMenuText,iconCls:"gxp-icon-measure-area",toggleGroup:this.toggleGroup,group:this.toggleGroup,allowDepress:false,listeners:{checkchange:function(item,checked){this.activeIndex=1;this.button.toggle(checked);if(checked){this.button.setIconClass(item.iconCls);}},scope:this},map:this.target.mapPanel.map,control:this.createMeasureControl(OpenLayers.Handler.Polygon,this.areaTooltip)}))]})});return gxp.plugins.Measure.superclass.addActions.apply(this,[this.button]);}});Ext.preg(gxp.plugins.Measure.prototype.ptype,gxp.plugins.Measure);Ext.namespace("gxp.plugins");gxp.plugins.ZoomToSelectedFeatures=Ext.extend(gxp.plugins.ZoomToExtent,{ptype:"gxp_zoomtoselectedfeatures",menuText:"Zoom to selected features",tooltip:"Zoom to selected features",closest:false,iconCls:"gxp-icon-zoom-to",extent:function(){var layer=this.target.tools[this.featureManager].featureLayer;var bounds,geom,extent,features=layer.selectedFeatures;for(var i=features.length-1;i>=0;--i){geom=features[i].geometry;if(geom){extent=geom.getBounds();if(bounds){bounds.extend(extent);}else{bounds=extent.clone();}}}
return bounds;},addActions:function(){var actions=gxp.plugins.ZoomToSelectedFeatures.superclass.addActions.apply(this,arguments);actions[0].disable();var layer=this.target.tools[this.featureManager].featureLayer;layer.events.on({"featureselected":function(evt){if(actions[0].isDisabled()&&evt.feature.geometry!==null){actions[0].enable();}},"featureunselected":function(){layer.selectedFeatures.length===0&&actions[0].disable();}});return actions;}});Ext.preg(gxp.plugins.ZoomToSelectedFeatures.prototype.ptype,gxp.plugins.ZoomToSelectedFeatures);Ext.namespace("gxp.form");gxp.form.GoogleGeocoderComboBox=Ext.extend(Ext.form.ComboBox,{xtype:"gxp_googlegeocodercombo",queryDelay:100,valueField:"viewport",displayField:"address",initComponent:function(){this.disabled=true;var ready=!!(window.google&&google.maps);if(!ready){if(!gxp.plugins||!gxp.plugins.GoogleSource){throw new Error("The gxp.form.GoogleGeocoderComboBox requires the gxp.plugins.GoogleSource or the Google Maps V3 API to be loaded.");}
gxp.plugins.GoogleSource.loader.onLoad({callback:this.prepGeocoder,errback:function(){throw new Error("The Google Maps script failed to load within the given timeout.");},scope:this});}else{window.setTimeout((function(){this.prepGeocoder();}).createDelegate(this),0);}
this.store=new Ext.data.JsonStore({root:"results",fields:[{name:"address",type:"string"},{name:"location"},{name:"viewport"}],autoLoad:false});this.on({focus:function(){this.clearValue();},scope:this});return gxp.form.GoogleGeocoderComboBox.superclass.initComponent.apply(this,arguments);},prepGeocoder:function(){var geocoder=new google.maps.Geocoder();var api={};api[Ext.data.Api.actions.read]=true;var proxy=new Ext.data.DataProxy({api:api});var combo=this;var getBounds=(function(){var bounds=this.bounds;if(bounds){if(bounds instanceof OpenLayers.Bounds){bounds=bounds.toArray();}
bounds=new google.maps.LatLngBounds(new google.maps.LatLng(bounds[1],bounds[0]),new google.maps.LatLng(bounds[3],bounds[2]));}
return bounds;}).createDelegate(this);proxy.doRequest=function(action,rs,params,reader,callback,scope,options){geocoder.geocode({address:params.query,bounds:getBounds()},function(results,status){var readerResult;if(status===google.maps.GeocoderStatus.OK||status===google.maps.GeocoderStatus.ZERO_RESULTS){try{results=combo.transformResults(results);readerResult=reader.readRecords({results:results});}catch(err){combo.fireEvent("exception",combo,"response",action,options,status,err);}}else{combo.fireEvent("exception",combo,"remote",action,options,status,null);}
if(readerResult){callback.call(scope,readerResult,options,true);}else{callback.call(scope,null,options,false);}});};this.store.proxy=proxy;if(this.initialConfig.disabled!=true){this.enable();}},transformResults:function(gResults){var num=gResults.length;var olResults=new Array(num);var item,latLng,bounds,ne,sw;for(i=0;i<num;++i){item=gResults[i];latLng=item.geometry.location;bounds=item.geometry.viewport;ne=bounds.getNorthEast();sw=bounds.getSouthWest();olResults[i]={address:item.formatted_address,location:new OpenLayers.LonLat(latLng.lng(),latLng.lat()),viewport:new OpenLayers.Bounds(sw.lng(),sw.lat(),ne.lng(),ne.lat())};}
return olResults;}});Ext.reg(gxp.form.GoogleGeocoderComboBox.prototype.xtype,gxp.form.GoogleGeocoderComboBox);Ext.namespace("gxp.plugins");gxp.plugins.GoogleGeocoder=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_googlegeocoder",updateField:"viewport",init:function(target){var combo=new gxp.form.GoogleGeocoderComboBox(Ext.apply({listeners:{select:this.onComboSelect,scope:this}},this.outputConfig));var bounds=target.mapPanel.map.restrictedExtent;if(bounds&&!combo.bounds){target.on({ready:function(){combo.bounds=bounds.clone().transform(target.mapPanel.map.getProjectionObject(),new OpenLayers.Projection("EPSG:4326"));}});}
this.combo=combo;return gxp.plugins.GoogleGeocoder.superclass.init.apply(this,arguments);},addOutput:function(config){return gxp.plugins.GoogleGeocoder.superclass.addOutput.call(this,this.combo);},onComboSelect:function(combo,record){if(this.updateField){var map=this.target.mapPanel.map;var location=record.get(this.updateField).clone().transform(new OpenLayers.Projection("EPSG:4326"),map.getProjectionObject());if(location instanceof OpenLayers.Bounds){map.zoomToExtent(location,true);}else{map.setCenter(location);}}}});Ext.preg(gxp.plugins.GoogleGeocoder.prototype.ptype,gxp.plugins.GoogleGeocoder);